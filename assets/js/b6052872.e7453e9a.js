"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7610],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>m,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){return function(t){var n=u(t.components);return a.createElement(e,o({},t,{components:n}))}},u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},x=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,d=c["".concat(i,".").concat(m)]||c[m]||f[m]||o;return n?a.createElement(d,l(l({ref:t},s),{},{components:n})):a.createElement(d,l({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=x;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}x.displayName="MDXCreateElement"},48273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={id:"bxl_getting_started",title:"Getting Started"},i=void 0,l={unversionedId:"developers/bxl_getting_started",id:"developers/bxl_getting_started",title:"Getting Started",description:"If you are mostly unfamiliar with Buck2, take a look at",source:"@site/../docs/developers/bxl_getting_started.md",sourceDirName:"developers",slug:"/developers/bxl_getting_started",permalink:"/docs/developers/bxl_getting_started",draft:!1,tags:[],version:"current",frontMatter:{id:"bxl_getting_started",title:"Getting Started"},sidebar:"mainSidebar",previous:{title:"Why BXL",permalink:"/docs/developers/bxl"},next:{title:"BXL Basics",permalink:"/docs/developers/bxl_basics"}},p={},s=[{value:"Navigating the docs",id:"navigating-the-docs",level:2},{value:"Writing a BXL",id:"writing-a-bxl",level:2},{value:"Running a BXL",id:"running-a-bxl",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"If you are mostly unfamiliar with Buck2, take a look at\n",(0,r.mdx)("a",{parentName:"p",href:"/docs/developers/bxl_basics"},"BXL Basics"),"."),(0,r.mdx)("h2",{id:"navigating-the-docs"},"Navigating the docs"),(0,r.mdx)("p",null,"All BXL APIs can be found ",(0,r.mdx)("a",{parentName:"p",href:"../../api/bxl/globals"},"here"),". A good place to start\nwould be the ",(0,r.mdx)("a",{parentName:"p",href:"../../api/bxl/bxl.Context"},(0,r.mdx)("inlineCode",{parentName:"a"},"bxl.Context")),", which contains all\navailable BXL functionalities."),(0,r.mdx)("p",null,"All ",(0,r.mdx)("a",{parentName:"p",href:"../../api/build/globals"},"Build APIs")," are mirrored to the BXL APIs section."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/bazelbuild/starlark/blob/master/spec.md"},"Starlark spec"),"\nis also a good resource for general Starlark APIs."),(0,r.mdx)("h2",{id:"writing-a-bxl"},"Writing a BXL"),(0,r.mdx)("p",null,"To create a BXL, first, create a script somewhere in the repository ending in\n",(0,r.mdx)("inlineCode",{parentName:"p"},".bxl"),". (Note that you can define a single bxl per file, or multiple BXLs per\nfile like in Starlark rules)."),(0,r.mdx)("p",null,"In it, define a BXL function as follows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def _your_implementation(ctx):\n    # ...\n    pass\n\nyour_function_name = bxl_main(\n    impl = _your_implementation,\n    cli_args = {\n        # cli args that you want to receive from the command line\n        "bool_arg": cli_args.bool(),\n        "list_type": cli_args.list(cli_args.int()),\n        "optional": cli_args.option(cli_args.string()),\n        "target": cli_args.target_label(),\n    },\n)\n')),(0,r.mdx)("p",null,"This exposes ",(0,r.mdx)("inlineCode",{parentName:"p"},"your_function_name")," as a function, with whatever arguments you\ndefined it, so that on the command line you can invoke:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},"buck2 bxl //myscript.bxl:your_function_name -- --bool_arg true --list_type 1 --list_type 2 --target //foo:bar`\n")),(0,r.mdx)("p",null,"You can also add helpdocs to the cli args and get them to show up in cli via\n",(0,r.mdx)("inlineCode",{parentName:"p"},"--help"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def _your_implementation(ctx):\n    # ...\n    pass\n\nyour_function_name = bxl_main(\n    impl = _your_implementation,\n    cli_args = {\n        "my_bool": cli_args.bool(True, "this will be printed as part of `--help`")\n    },\n)\n')),(0,r.mdx)("p",null,"The implementation function takes a single context as parameter (see the\ndocumentation for ",(0,r.mdx)("a",{parentName:"p",href:"../../api/bxl/bxl.Context"},(0,r.mdx)("inlineCode",{parentName:"a"},"bxl.Context")),"). Using it, you'll\nbe able to access functions that enable you to perform queries, analysis,\nbuilds, and even create your own actions within BXL to build artifacts as part\nof a BXL function."),(0,r.mdx)("p",null,"The primary method to return information from BXL is to either print them, or\nbuild some artifact (for details, see the\n",(0,r.mdx)("a",{parentName:"p",href:"../../api/bxl/bxl.OutputStream"},(0,r.mdx)("inlineCode",{parentName:"a"},"bxl.OutputStream"))," documentation, available as\npart of ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.output"),"). At high level, ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.output.print(..)")," prints results to\nstdout, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.output.ensure(artifact)")," marks artifacts as to be materialized\ninto buck-out by the end of the BXL function, returning an object that lets you\nprint the output path via ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.output.print(ensured)"),"."),(0,r.mdx)("h2",{id:"running-a-bxl"},"Running a BXL"),(0,r.mdx)("p",null,"To run a BXL function, invoke the buck2 command:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},"buck2 bxl <bxl function> -- <function args>\n")),(0,r.mdx)("p",null,"Where ",(0,r.mdx)("inlineCode",{parentName:"p"},"<bxl function>")," is of the form ",(0,r.mdx)("inlineCode",{parentName:"p"},"<cell path to function>:<function name>"),",\nand ",(0,r.mdx)("inlineCode",{parentName:"p"},"<function args>")," are the arguments that the function accepts from the\ncommand line."),(0,r.mdx)("p",null,"The documentation for a BXL function can be seen by running:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"}," buck2 bxl <bxl function> -- --help`\n")),(0,r.mdx)("p",null,"Note that this is different from ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2 bxl --help"),", which generates the help\nfor the buck2 command instead of the function."))}u.isMDXComponent=!0}}]);