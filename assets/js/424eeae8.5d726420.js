"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5046],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>i,MDXProvider:()=>s,mdx:()=>b,useMDXComponents:()=>g,withMDXComponents:()=>x});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var i=n.createContext({}),x=function(e){return function(t){var r=g(t.components);return n.createElement(e,a({},t,{components:r}))}},g=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},s=function(e){var t=g(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),x=g(r),s=l,c=x["".concat(o,".").concat(s)]||x[s]||p[s]||a;return r?n.createElement(c,u(u({ref:t},i),{},{components:r})):n.createElement(c,u({ref:t},i))}));function b(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,o=new Array(a);o[0]=f;var u={};for(var d in t)hasOwnProperty.call(t,d)&&(u[d]=t[d]);u.originalType=e,u[c]="string"==typeof e?e:l,o[1]=u;for(var i=2;i<a;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},55034:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>u,toc:()=>i});var n=r(87462),l=(r(67294),r(3905));const a={id:"bxl.CqueryContext"},o="bxl.CqueryContext type",u={unversionedId:"api/bxl/bxl.CqueryContext",id:"api/bxl/bxl.CqueryContext",title:"bxl.CqueryContext type",description:"The context for performing cquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command.",source:"@site/../docs/api/bxl/bxl.CqueryContext.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/bxl.CqueryContext",permalink:"/docs/api/bxl/bxl.CqueryContext",draft:!1,tags:[],version:"current",frontMatter:{id:"bxl.CqueryContext"},sidebar:"apiSidebar",previous:{title:"bxl.Context type",permalink:"/docs/api/bxl/bxl.Context"},next:{title:"bxl.EnsuredArtifact type",permalink:"/docs/api/bxl/bxl.EnsuredArtifact"}},d={},i=[{value:"bxl.CqueryContext.allpaths",id:"bxlcquerycontextallpaths",level:2},{value:"bxl.CqueryContext.attrfilter",id:"bxlcquerycontextattrfilter",level:2},{value:"bxl.CqueryContext.attrregexfilter",id:"bxlcquerycontextattrregexfilter",level:2},{value:"bxl.CqueryContext.buildfile",id:"bxlcquerycontextbuildfile",level:2},{value:"bxl.CqueryContext.deps",id:"bxlcquerycontextdeps",level:2},{value:"bxl.CqueryContext.eval",id:"bxlcquerycontexteval",level:2},{value:"bxl.CqueryContext.filter",id:"bxlcquerycontextfilter",level:2},{value:"bxl.CqueryContext.inputs",id:"bxlcquerycontextinputs",level:2},{value:"bxl.CqueryContext.kind",id:"bxlcquerycontextkind",level:2},{value:"bxl.CqueryContext.nattrfilter",id:"bxlcquerycontextnattrfilter",level:2},{value:"bxl.CqueryContext.owner",id:"bxlcquerycontextowner",level:2},{value:"bxl.CqueryContext.rdeps",id:"bxlcquerycontextrdeps",level:2},{value:"bxl.CqueryContext.somepath",id:"bxlcquerycontextsomepath",level:2},{value:"bxl.CqueryContext.testsof",id:"bxlcquerycontexttestsof",level:2},{value:"bxl.CqueryContext.testsof_with_default_target_platform",id:"bxlcquerycontexttestsof_with_default_target_platform",level:2}],x={toc:i};function g(e){let{components:t,...r}=e;return(0,l.mdx)("wrapper",(0,n.Z)({},x,r,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"bxlcquerycontext-type"},(0,l.mdx)("inlineCode",{parentName:"h1"},"bxl.CqueryContext")," type"),(0,l.mdx)("p",null,"The context for performing ",(0,l.mdx)("inlineCode",{parentName:"p"},"cquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command."),(0,l.mdx)("p",null,"Query results are ",(0,l.mdx)("inlineCode",{parentName:"p"},"target_set"),"s of ",(0,l.mdx)("inlineCode",{parentName:"p"},"target_node"),"s, which supports iteration,\nindexing, ",(0,l.mdx)("inlineCode",{parentName:"p"},"len()"),", set addition/subtraction, and ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,l.mdx)("h2",{id:"bxlcquerycontextallpaths"},"bxl.CqueryContext.allpaths"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.allpaths(\n    from: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label],\n    to: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"allpaths")," query for computing all dependency paths."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextattrfilter"},"bxl.CqueryContext.attrfilter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.attrfilter(\n    attr: str,\n    value: str,\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextattrregexfilter"},"bxl.CqueryContext.attrregexfilter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.attrregexfilter(\n    attribute: str,\n    value: str,\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrregexfilter(ctx):\n    filtered = ctx.cquery().attrregexfilter("foo", "he.lo", "bin/kind/...")\n    ctx.output.print(filtered)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextbuildfile"},"bxl.CqueryContext.buildfile"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.buildfile(\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> file_set\n")),(0,l.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.cquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.cquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextdeps"},"bxl.CqueryContext.deps"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.deps(\n    universe: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label],\n    depth: None | int = None,\n    filter: None | str = None\n) -> target_set\n")),(0,l.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_deps(ctx):\n    result = ctx.cquery().deps("root//bin:the_binary", 1)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontexteval"},"bxl.CqueryContext.eval"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.eval(\n    query: str,\n    query_args: None | target_set | list[str] = None,\n    target_universe: None | list[str] | tuple[str, ...] = None\n)\n")),(0,l.mdx)("p",null,"Evaluates some general query string. ",(0,l.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings. Returns a ",(0,l.mdx)("inlineCode",{parentName:"p"},"dict")," of target labels mapped to their ",(0,l.mdx)("inlineCode",{parentName:"p"},"target_set")," results if ",(0,l.mdx)("inlineCode",{parentName:"p"},"query_args")," was passed in, otherwise returns a single ",(0,l.mdx)("inlineCode",{parentName:"p"},"target_set"),"."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result1 = ctx.cquery().eval("inputs(root//bin:the_binary)")\n    ctx.output.print(result1)\n\n    result2 = ctx.cquery().eval("inputs(%s)", query_args = ["cell//path/to/file:target"])\n    ctx.output.print(result2)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextfilter"},"bxl.CqueryContext.filter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.filter(\n    regex: str,\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The filter query for filtering targets by name."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.cquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextinputs"},"bxl.CqueryContext.inputs"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.inputs(\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> file_set\n")),(0,l.mdx)("p",null,"The inputs query for finding input files."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_inputs(ctx):\n    result = ctx.cquery().inputs("root//bin:the_binary")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextkind"},"bxl.CqueryContext.kind"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.kind(\n    regex: str,\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The kind query for filtering targets by rule type."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_kind(ctx):\n    kind = ctx.cquery().kind(".*1", "bin/kind/...")\n    ctx.output.print(kind)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextnattrfilter"},"bxl.CqueryContext.nattrfilter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.nattrfilter(\n    attr: str,\n    value: str,\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The nattrfilter query for rule attribute filtering. It is the opposite of ",(0,l.mdx)("inlineCode",{parentName:"p"},"attrfilter"),", i.e. it filters targets by attribute but excludes those that match."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextowner"},"bxl.CqueryContext.owner"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.owner(\n    files: file_set | str | list[str] | tuple[str, ...],\n    universe: None | bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label] = None\n) -> target_set\n")),(0,l.mdx)("p",null,"The owner query for finding targets that own specified files. Note that if you do not pass in a cell path (where the format is ",(0,l.mdx)("inlineCode",{parentName:"p"},"<cell>//path/to/file"),"), the path is resolved against the cell that the BXL script lives in. If you need to evaluate a file path that lives in a different cell, you must pass in the fully qualified cell path."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.cquery().owner("bin/TARGETS.fixture", "foo//target/universe/...")\n    ctx.output.print(owner)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextrdeps"},"bxl.CqueryContext.rdeps"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.rdeps(\n    universe: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label],\n    from: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label],\n    depth: int = _\n) -> target_set\n")),(0,l.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rdeps(ctx):\n    result = ctx.cquery().rdeps("root//bin:the_binary", "//lib:file1", 100)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontextsomepath"},"bxl.CqueryContext.somepath"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.somepath(\n    from: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label],\n    to: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontexttestsof"},"bxl.CqueryContext.testsof"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.testsof(\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The testsof query for listing the tests of the specified targets."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxlcquerycontexttestsof_with_default_target_platform"},"bxl.CqueryContext.testsof","_","with","_","default","_","target","_","platform"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.CqueryContext.testsof_with_default_target_platform(\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label | target_set | target_set | list[bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The testsof query for listing the tests of the specified targets. Performs default target platform resolution under the hood for the tests found."))}g.isMDXComponent=!0}}]);