"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3955],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>p,useMDXComponents:()=>d,withMDXComponents:()=>u});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),u=function(e){return function(n){var t=d(n.components);return o.createElement(e,i({},n,{components:t}))}},d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,h=u["".concat(l,".").concat(m)]||u[m]||g[m]||i;return t?o.createElement(h,s(s({ref:n},c),{},{components:t})):o.createElement(h,s({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=f;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s[h]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},66225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const i={id:"log",title:"log"},l=void 0,s={unversionedId:"users/commands/log",id:"users/commands/log",title:"log",description:"These are the flags/commands under buck2 log and their --help output:",source:"@site/../docs/users/commands/log.generated.md",sourceDirName:"users/commands",slug:"/users/commands/log",permalink:"/docs/users/commands/log",draft:!1,tags:[],version:"current",frontMatter:{id:"log",title:"log"},sidebar:"mainSidebar",previous:{title:"killall",permalink:"/docs/users/commands/killall"},next:{title:"lsp",permalink:"/docs/users/commands/lsp"}},r={},c=[{value:"buck log",id:"buck-log",level:2},{value:"buck log what-ran",id:"buck-log-what-ran",level:3},{value:"buck log what-failed",id:"buck-log-what-failed",level:3},{value:"buck log path",id:"buck-log-path",level:3},{value:"buck log show",id:"buck-log-show",level:3},{value:"buck log cmd",id:"buck-log-cmd",level:3},{value:"buck log what-up",id:"buck-log-what-up",level:3},{value:"buck log what-materialized",id:"buck-log-what-materialized",level:3},{value:"buck log what-uploaded",id:"buck-log-what-uploaded",level:3},{value:"buck log critical-path",id:"buck-log-critical-path",level:3},{value:"buck log replay",id:"buck-log-replay",level:3},{value:"buck log show-user",id:"buck-log-show-user",level:3},{value:"buck log summary",id:"buck-log-summary",level:3}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"These are the flags/commands under ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 log")," and their ",(0,a.mdx)("inlineCode",{parentName:"p"},"--help")," output:"),(0,a.mdx)("h2",{id:"buck-log"},"buck log"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Commands for interacting with buck2 logs\n\nUsage: buck2-release log [OPTIONS] <COMMAND>\n\nCommands:\n  what-ran           Output everything Buck2 ran from selected invocation\n  what-failed        Outputs every command that failed in the selected invocation\n  path               Output the path to the selected log\n  show               Outputs the log in JSON format from selected invocation\n  cmd                Show buck command line arguments from selected invocation\n  what-up            Show the spans that were open when the log ended\n  what-materialized  Outputs materializations from selected invocation\n  what-uploaded      Outputs stats about uploads to RE from the selected invocation\n  critical-path      Show the critical path for a selected build\n  replay             Replay an event log\n  show-user          Converts the event log from a selected invocation into a user event log, in\n                     JSONL format\n  summary            Outputs high level statistics about the build\n  help               Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-ran"},"buck log what-ran"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Output everything Buck2 ran from selected invocation.\n\nThe output is presented as a series of tab-delimited records with the following structure:\n\nThe reason for executing a given command. That's either to build or to test.\n\nThe identity of this command. This will include the target that ran required it.\n\nThe executor for this command. This will either be RE or local.\n\nDetails to reproduce it. For RE, that's the action digest. For local, the command.\n\nTo reproduce an action that ran on RE, use the following command then follow the instructions. The\nDIGEST is of the form `hash:size`.\n\nfrecli cas download-action DIGEST\n\nTo reproduce an action that ran locally, make sure your working directory is the project root (if\nunsure, use `buck2 root --kind project` to find it), then run the command. The command is already\nshell-quoted.\n\nUsage: buck2-release log what-ran [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --format <OUTPUT>\n          Which output format to use for this command\n          \n          [default: tabulated]\n          [possible values: tabulated, json, csv]\n\n      --emit-cache-queries\n          \n\n      --skip-cache-hits\n          \n\n      --skip-remote-executions\n          \n\n      --skip-local-executions\n          \n\n      --filter-category <FILTER_CATEGORY>\n          Regular expression to filter commands by given action category (i.e. type of of actions\n          that are similar but operate on different inputs, such as invocations of a C++ compiler\n          (whose category would be `cxx_compile`)). Matches by full string\n\n      --failed\n          Show only commands that failed\n\n      --incomplete\n          Show only commands that were not completed. That is command were running if buck2 process\n          was killed, or command currently running if buck2 is running build now\n\n      --show-std-err\n          Show also std_err from commands that are run. If the command fails before completing, we\n          display \"<command did not finish executing>\". If it finishes but there is no error, we\n          display \"<stderr is empty>\". Otherwise, std_err is shown. For JSON, we show raw values and\n          null for non-completion\n\n      --omit-empty-std-err\n          Omit commands if their std_err is empty\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-failed"},"buck log what-failed"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Outputs every command that failed in the selected invocation.\n\nLook at the help for what-ran to understand the output format.\n\nUsage: buck2-release log what-failed [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --format <OUTPUT>\n          Which output format to use for this command\n          \n          [default: tabulated]\n          [possible values: tabulated, json, csv]\n\n      --emit-cache-queries\n          \n\n      --skip-cache-hits\n          \n\n      --skip-remote-executions\n          \n\n      --skip-local-executions\n          \n\n      --filter-category <FILTER_CATEGORY>\n          Regular expression to filter commands by given action category (i.e. type of of actions\n          that are similar but operate on different inputs, such as invocations of a C++ compiler\n          (whose category would be `cxx_compile`)). Matches by full string\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-path"},"buck log path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Output the path to the selected log\n\nUsage: buck2-release log path [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --all\n          List all the logs\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-show"},"buck log show"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Outputs the log in JSON format from selected invocation\n\nUsage: buck2-release log show [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-cmd"},"buck log cmd"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Show buck command line arguments from selected invocation.\n\nThis command output is not machine readable. Robots, please use `buck2 log show`.\n\nUsage: buck2-release log cmd [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --expand\n          Show @-expanded command line arguments instead of the original command line\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-up"},"buck log what-up"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Show the spans that were open when the log ended\n\nUsage: buck2-release log what-up [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --after <NUMBER>\n          Print the actions that where open after certain amount of milliseconds\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-materialized"},"buck log what-materialized"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Outputs materializations from selected invocation.\n\nThe output is a tab-separated list containing the path, the materialization method, the file count,\nand the total size (after decompression).\n\nUsage: buck2-release log what-materialized [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n  -s, --sort-by-size\n          Sort the output by total bytes in ascending order\n\n      --aggregate-by-ext\n          Aggregates the output by file extension\n\n      --format <OUTPUT>\n          Which output format to use for this command\n          \n          [default: tabulated]\n          [possible values: tabulated, json, csv]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-uploaded"},"buck log what-uploaded"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Outputs stats about uploads to RE from the selected invocation\n\nUsage: buck2-release log what-uploaded [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --format <OUTPUT>\n          Which output format to use for this command\n          \n          [default: tabulated]\n          [possible values: tabulated, json, csv]\n\n      --aggregate-by-ext\n          Aggregates the output by file extension\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-critical-path"},"buck log critical-path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Show the critical path for a selected build.\n\nThis produces tab-delimited output listing every node on the critical path.\n\nIt includes the kind of node, its name, category and identfier, as well as total duration (runtime\nof this node), user duration (duration the user can improve) and potential improvement before this\nnode stops being on the critical path.\n\nAll durations are in microseconds.\n\nUsage: buck2-release log critical-path [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --format <FORMAT>\n          Which output format to use for this command\n          \n          [default: tabulated]\n          [possible values: tabulated, json, csv]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-replay"},"buck log replay"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Replay an event log.\n\nThis command allows visualizing an existing event log in a Superconsole.\n\nUsage: buck2-release log replay [OPTIONS] [PATH] [OVERRIDE_ARGS]...\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\n  [OVERRIDE_ARGS]...\n          Override the arguments\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n      --speed <NUMBER>\n          Control the playback speed using a float (i.e. 0.5, 2, etc)\n\n      --preload\n          Preload the event log. This is typically only useful for benchmarking\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nConsole Options:\n      --console <super|simple|...>\n          Which console to use for this command\n          \n          [env: BUCK_CONSOLE=]\n          [default: auto]\n          [possible values: simple, simplenotty, simpletty, super, auto, none]\n\n      --ui <UI>...\n          Configure additional superconsole ui components.\n          \n          Accepts a comma-separated list of superconsole components to add. Possible values are:\n          \n          dice - shows information about evaluated dice nodes debugevents - shows information about\n          the flow of events from buckd\n          \n          These components can be turned on/off interactively. Press 'h' for help when superconsole\n          is active.\n\n          Possible values:\n          - dice\n          - debugevents\n          - io:          I/O panel\n          - re:          RE panel\n\n      --no-interactive-console\n          Disable console interactions\n          \n          [env: BUCK_NO_INTERACTIVE_CONSOLE=]\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-show-user"},"buck log show-user"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Converts the event log from a selected invocation into a user event log, in JSONL format\n\nUsage: buck2-release log show-user [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")),(0,a.mdx)("h3",{id:"buck-log-summary"},"buck log summary"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"Outputs high level statistics about the build\n\nUsage: buck2-release log summary [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          A path to an event-log file to read from\n\nOptions:\n      --recent <NUMBER>\n          Open the event-log file from a recent command\n\n      --trace-id <ID>\n          Show log by trace id\n\n      --allow-remote\n          This option does nothing\n\n      --no-remote\n          Do not allow downloading the log from manifold if it's not found locally\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n")))}d.isMDXComponent=!0}}]);