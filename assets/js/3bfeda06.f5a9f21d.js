"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8033],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>p});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){return function(t){var n=d(t.components);return r.createElement(e,o({},t,{components:n}))}},d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),c=a,m=p["".concat(i,".").concat(c)]||p[c]||g[c]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},99560:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={id:"target_universe",title:"Target Universe in BXL"},i=void 0,s={unversionedId:"developers/target_universe",id:"developers/target_universe",title:"Target Universe in BXL",description:"BXL cquery and target universe",source:"@site/../docs/developers/bxl_target_universe.md",sourceDirName:"developers",slug:"/developers/target_universe",permalink:"/docs/developers/target_universe",draft:!1,tags:[],version:"current",frontMatter:{id:"target_universe",title:"Target Universe in BXL"},sidebar:"mainSidebar",previous:{title:"Common How-Tos",permalink:"/docs/developers/bxl_how_tos"},next:{title:"BXL Telemetry",permalink:"/docs/developers/bxl_telemetry"}},l={},u=[{value:"BXL cquery and target universe",id:"bxl-cquery-and-target-universe",level:2},{value:"Specifying target universe in BXL cquery",id:"specifying-target-universe-in-bxl-cquery",level:3},{value:"What does the target universe tend to be in practice?",id:"what-does-the-target-universe-tend-to-be-in-practice",level:3},{value:"<code>keep-going</code>",id:"keep-going",level:3},{value:"BXL build and target universe",id:"bxl-build-and-target-universe",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h2",{id:"bxl-cquery-and-target-universe"},"BXL cquery and target universe"),(0,a.mdx)("p",null,"BXL cannot infer the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/concepts/glossary#target-universe"},"target universe"),"\nlike in the CLI (in most cases). BXL splits up cquery functions per function\n(ex: ",(0,a.mdx)("inlineCode",{parentName:"p"},"ctx.cquery().kind(...)"),"), with the exception of ",(0,a.mdx)("inlineCode",{parentName:"p"},"ctx.cquery.eval(...)"),",\nwhich accepts literals exactly like in the CLI. For the ",(0,a.mdx)("inlineCode",{parentName:"p"},"eval")," query, target\nuniverse is inferred exactly like the CLI."),(0,a.mdx)("p",null,"For all other cases, take the following query as an example:"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},'buck2 cquery "rdeps(deps(//example:foo), deps(//example:bar))"')),(0,a.mdx)("p",null,"The target universe here should be constructed from the all the target literals\nand their transitive deps, which is to say ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps(//example:foo, //example:bar)"),".\nWhen you run the query, the evaluation of ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps(//example:foo)")," and\n",(0,a.mdx)("inlineCode",{parentName:"p"},"deps(//example:bar)")," nested in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"rdeps")," query will happen inside the\nuniverse resulting from ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps(//example:foo, //example:bar)"),". Translating it to\nBXL's individual cquery functions, and let\u2019s say we also try to use the target\nliterals to construct the universe as the CLI target inference does:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'from_node = ctx.cquery().deps("//example:foo") # universe would be //example:foo\n\nto_node = ctx.cquery().deps("//example:bar") # universe would be //example:bar\n\nrdeps = ctx.cquery().rdeps(from_node, to_node) # what is the universe here?\n')),(0,a.mdx)("p",null,"Here, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"from_node")," query is actually evaluated in the wrong target universe\nbecause we have broken up the query steps in BXL. Instead of\n",(0,a.mdx)("inlineCode",{parentName:"p"},"deps(//example:foo)")," being evaluated in ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps(//example:foo, //example:bar)"),",\nit\u2019s evaluated with only ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps(//example:foo)"),". It\u2019s impossible to know that\nthere\u2019s going to be an rdeps query later on that expects a different target\nuniverse."),(0,a.mdx)("h3",{id:"specifying-target-universe-in-bxl-cquery"},"Specifying target universe in BXL cquery"),(0,a.mdx)("p",null,"BXL cquery functions should only accept configured targets as inputs, with the\nexception of ",(0,a.mdx)("inlineCode",{parentName:"p"},"eval")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"testsof_with_default_platform"),"."),(0,a.mdx)("p",null,"BXL has a ",(0,a.mdx)("inlineCode",{parentName:"p"},"ctx.target_universe()")," function to construct a ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_universe"),"\nobject, which has a ",(0,a.mdx)("inlineCode",{parentName:"p"},"lookup()")," function to lookup the configured targets within\nthe target universe and return the target set. \u200b\u200bThe lookup functionality is\nuseful because sometimes a single target can appear multiple times within a\ntarget universe. For example, if you specify a cxx toolchain using its\nunconfigured target label, it will always match against all cxx toolchains in\nthe target universe (so at least once for target deps and once for exec deps),\nsince cxx toolchains may have multiple configurations. Example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def _impl():\n    target_universe = ctx.target_universe(["//example:foo", "//example:bar"])\n    to_node = target_universe.lookup("//example:foo")\n    from_node = target_universe.lookup("//example:bar")\n    rdeps = ctx.cquery().rdeps(to_node, from_node)\n')),(0,a.mdx)("p",null,"However, sometimes you might want a specific configuration instead of using all\nconfigurations found within a target universe, in which case you could use\n",(0,a.mdx)("inlineCode",{parentName:"p"},"ctx.configured_targets(...)")," to specify the configuration. Or, sometimes you\nmay want to use the specific configured target nodes resulting from other BXL\ncalls. In these cases, you can pass the configured targets directly into cquery\nfunctions, instead of going through target universe lookup."),(0,a.mdx)("h3",{id:"what-does-the-target-universe-tend-to-be-in-practice"},"What does the target universe tend to be in practice?"),(0,a.mdx)("p",null,"For ",(0,a.mdx)("inlineCode",{parentName:"p"},"owner")," query, the universe would be constructed with the unconfigured\ntarget nodes returned from ",(0,a.mdx)("inlineCode",{parentName:"p"},"ctx.uquery().owner(...)"),". Example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def _impl():\n    unconfigured_owners = ctx.uquery().owner("foobar")\n    target_universe = ctx.target_universe(unconfigured_owners).target_set()\n    owners = ctx.cquery().owner("foobar", target_universe)\n')),(0,a.mdx)("p",null,"For everything else, the universe would usually be constructed using all target\nliterals found in your query. Example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def _impl():\n    target_universe = ctx.target_universe("//example:foo")\n    inputs = target_universe.target_set()\n    deps = ctx.cquery().deps(inputs)\n')),(0,a.mdx)("p",null,"While the above guideline should work for ",(0,a.mdx)("inlineCode",{parentName:"p"},"rdeps")," as well, for ",(0,a.mdx)("inlineCode",{parentName:"p"},"rdeps"),' the\nuniverse would usually be narrowed down to the "to"/"destination" target set\nargument. (This is a subset of the target universe suggested for non-',(0,a.mdx)("inlineCode",{parentName:"p"},"owner"),"\nquery cases). Updating the example from above:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def _impl():\n    target_universe = ctx.target_universe("//example:foo") # narrowed down to the "to" literals in rdeps\n    universe_node = target_universe.target_set()\n    from_node = target_universe.lookup("//example:bar")\n    rdeps = ctx.cquery().rdeps(universe_node, from_node)\n')),(0,a.mdx)("h3",{id:"keep-going"},(0,a.mdx)("inlineCode",{parentName:"h3"},"keep-going")),(0,a.mdx)("p",null,"The configured graph can be broken for various reasons: incompatible targets\n(BXL skips these automatically), visibility issues, nonexistent targets, etc.\nFor issues that are not incompatible targets, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_universe")," can be\nconstructed with the ",(0,a.mdx)("inlineCode",{parentName:"p"},"keep_going")," flag set to ",(0,a.mdx)("inlineCode",{parentName:"p"},"True")," to skip any other errors,\nand your cquery will not error out. Note that ",(0,a.mdx)("inlineCode",{parentName:"p"},"keep_going")," is only compatible\nfor a single string literal target or target pattern at the moment."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'ctx.target_universe("//foo/...", keep_going = True)\n')),(0,a.mdx)("h2",{id:"bxl-build-and-target-universe"},"BXL build and target universe"),(0,a.mdx)("p",null,"Note that BXL builds currently do not support target universe, but we intend to\nadd this."))}d.isMDXComponent=!0}}]);