"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6853],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),c=function(e){return function(t){var n=p(t.components);return a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,m=c["".concat(o,".").concat(d)]||c[d]||y[d]||i;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},38973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={id:"dynamic_output",title:"BXL and Dynamic Outputs"},o=void 0,l={unversionedId:"developers/dynamic_output",id:"developers/dynamic_output",title:"BXL and Dynamic Outputs",description:"Dynamic output",source:"@site/../docs/developers/bxl_dynamic_output.md",sourceDirName:"developers",slug:"/developers/dynamic_output",permalink:"/docs/developers/dynamic_output",draft:!1,tags:[],version:"current",frontMatter:{id:"dynamic_output",title:"BXL and Dynamic Outputs"},sidebar:"mainSidebar",previous:{title:"BXL and Anonymous Targets",permalink:"/docs/developers/anon_targets"},next:{title:"FAQs",permalink:"/docs/developers/bxl_faqs"}},s={},u=[{value:"Dynamic output",id:"dynamic-output",level:2},{value:"Limitations",id:"limitations",level:3},{value:"Silly example",id:"silly-example",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h2",{id:"dynamic-output"},"Dynamic output"),(0,r.mdx)("p",null,"When declaring ",(0,r.mdx)("a",{parentName:"p",href:"/docs/rule_authors/dynamic_dependencies"},"dynamic outputs")," within\na BXL script, the dynamic lambda for is created with a ",(0,r.mdx)("inlineCode",{parentName:"p"},"bxl_ctx"),", which means\nthat you can do things like run analysis or queries to inspect the build graph\nfrom within the dynamic lambda."),(0,r.mdx)("p",null,"You may declare multiple dynamic outputs within a single BXL script, or declare\nnested dynamic outputs. Dynamic outputs are run asynchronously after the BXL\nevaluation."),(0,r.mdx)("h3",{id:"limitations"},"Limitations"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"ctx.output")," is not available from a dynamic lambda. This means you can\u2019t\nensure artifacts or print cached outputs within a dynamic lambda."),(0,r.mdx)("li",{parentName:"ul"},"Error messages from skipping incompatible targets are only emitted to the\nconsole, and not cached in the stderr"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"build()")," is not available from a dynamic lambda"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"bxl_actions")," in a dynamic lambda always inherits the execution platform\nresolution of the root/parent BXL.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"The expected usage of ",(0,r.mdx)("inlineCode",{parentName:"li"},"bxl_actions")," from within a dynamic lambda is to\ninstantiate it without any named parameters, but the ",(0,r.mdx)("inlineCode",{parentName:"li"},"exec_deps")," and\n",(0,r.mdx)("inlineCode",{parentName:"li"},"toolchains")," of the execution platform resolution are accessible, and return\nthe same values as the root/parent BXL"))),(0,r.mdx)("li",{parentName:"ul"},"Profiling is not hooked up to dynamic BXL context")),(0,r.mdx)("h3",{id:"silly-example"},"Silly example"),(0,r.mdx)("p",null,"This is a silly example of creating a dynamic output which reads some\n",(0,r.mdx)("inlineCode",{parentName:"p"},"query_params")," input, calls some BXL functions like ",(0,r.mdx)("inlineCode",{parentName:"p"},"uquery"),",\n",(0,r.mdx)("inlineCode",{parentName:"p"},"configured_targets")," to get the resolved attributes of a target node, and then\nwrites the attributes to an output file."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def _impl_dynamic_output(ctx):\n    actions = ctx.bxl_actions().actions\n\n    # Declare some input here to read within the lambda\n    query_params = actions.write_json("query_params", {"rule_type": "apple_bundle", "universe": "fbcode//buck2/tests/..."})\n\n    # Dynamic lambda\'s output artifact\n    resolved_attrs = actions.declare_output("resolved_attrs")\n\n    # Dynamic lambda function to be used in the dynamic_output\n    def my_deferred(ctx, artifacts, outputs):\n\n        # Read the input, then do some BXL things here\n\n        params = artifacts[query_params].read_json()\n        target = ctx.uquery().kind(params["rule_type"], params["universe"])[0]\n        node = ctx.configured_targets(target.label)\n        eager_attrs = node.resolved_attrs_eager(ctx)\n\n        # Dynamic BXL context\'s `bxl_actions` does not take in named parameters because it inherits the exec platform resolution from the root/parent BXL. If the root BXL\'s `bxl_actions` were created with exec deps/toolchains, you can access them using `exec_deps` and `toolchains` attributes here\n\n        ctx.bxl_actions().actions.write(outputs[resolved_attrs], str(eager_attrs))\n\n    actions.dynamic_output(\n        dynamic = [query_params],\n        inputs = [],\n        outputs = [\n            resolved_attrs,\n        ],\n        f = my_deferred,\n    )\n\n    ctx.output.print(ctx.output.ensure(resolved_attrs).abs_path())\n\ndynamic_output_example = bxl_main(\n    impl = _impl_dynamic_output,\n    cli_args = {\n    },\n)\n')))}p.isMDXComponent=!0}}]);