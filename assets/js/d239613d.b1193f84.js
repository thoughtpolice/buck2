"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9662],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>m,MDXProvider:()=>p,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>s});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),s=function(e){return function(t){var a=u(t.components);return n.createElement(e,i({},t,{components:a}))}},u=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(m.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),s=u(a),p=r,c=s["".concat(o,".").concat(p)]||s[p]||h[p]||i;return a?n.createElement(c,l(l({ref:t},m),{},{components:a})):n.createElement(c,l({ref:t},m))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=f;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},44863:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={id:"build_target",title:"Build Target"},o="Build Target",l={unversionedId:"concepts/build_target",id:"concepts/build_target",title:"Build Target",description:"A build target is a string that identifies a build target in your project.",source:"@site/../docs/concepts/build_target.md",sourceDirName:"concepts",slug:"/concepts/build_target",permalink:"/docs/concepts/build_target",draft:!1,tags:[],version:"current",frontMatter:{id:"build_target",title:"Build Target"},sidebar:"mainSidebar",previous:{title:"Build File",permalink:"/docs/concepts/build_file"},next:{title:"Target Pattern",permalink:"/docs/concepts/target_pattern"}},d={},m=[{value:"Fully-qualified build targets",id:"fully-qualified-build-targets",level:4},{value:"Relative build targets",id:"relative-build-targets",level:4},{value:"Command-line Pro Tips",id:"command-line-pro-tips",level:2},{value:"See also",id:"see-also",level:2}],s={toc:m};function u(e){let{components:t,...a}=e;return(0,r.mdx)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"build-target"},"Build Target"),(0,r.mdx)("p",null,"A ",(0,r.mdx)("em",{parentName:"p"},"build target")," is a string that identifies a build target in your project.\nBuild targets are used as arguments to Buck2 commands, such as\n",(0,r.mdx)("a",{parentName:"p",href:"../../users/commands/build"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck2 build"))," and\n",(0,r.mdx)("a",{parentName:"p",href:"../../users/commands/run"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck2 run")),". Build targets are also used as\narguments to ",(0,r.mdx)("a",{parentName:"p",href:"/docs/concepts/build_rule"},"build rules")," to enable one target to reference\nanother. For example, a build rule might use a build target to reference another\ntarget in order to specify that target as a ",(0,r.mdx)("em",{parentName:"p"},"dependency"),"."),(0,r.mdx)("h4",{id:"fully-qualified-build-targets"},"Fully-qualified build targets"),(0,r.mdx)("p",null,"Here is an example of a ",(0,r.mdx)("em",{parentName:"p"},"fully-qualified")," build target:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"//java/com/facebook/share:ui\n")),(0,r.mdx)("p",null,"A fully-qualified build target has three components:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"//")," prefix indicates that the subsequent path is from the ",(0,r.mdx)("em",{parentName:"li"},"root")," of your\nproject. You can use the ",(0,r.mdx)("inlineCode",{parentName:"li"},"buck2 root")," command to identify the root of your\nproject."),(0,r.mdx)("li",{parentName:"ol"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"java/com/facebook/share")," between the ",(0,r.mdx)("inlineCode",{parentName:"li"},"//")," prefix and the colon (",(0,r.mdx)("inlineCode",{parentName:"li"},":"),")\nindicates that the ",(0,r.mdx)("a",{parentName:"li",href:"/docs/concepts/build_file"},"build file")," (usually named ",(0,r.mdx)("inlineCode",{parentName:"li"},"BUCK"),") is\nlocated in the directory ",(0,r.mdx)("inlineCode",{parentName:"li"},"java/com/facebook/share"),"."),(0,r.mdx)("li",{parentName:"ol"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"ui")," after the colon (",(0,r.mdx)("inlineCode",{parentName:"li"},":"),") indicates the name of the build target within\nthe build file. Build target names must be unique within a build file. By\n",(0,r.mdx)("em",{parentName:"li"},"name")," we mean, more formally, the value of the ",(0,r.mdx)("inlineCode",{parentName:"li"},"name")," argument to the build\nrule.")),(0,r.mdx)("p",null,"Note that the name of the build file itself\u2014usually BUCK\u2014does ",(0,r.mdx)("em",{parentName:"p"},"not")," occur in the\nbuild target. All build files within a given Buck2 project must have the same\nname\u2014defined in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"[buildfile].name")," entry of ",(0,r.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". Therefore, it is\nunnecessary to include the name in the target. The full regular expression for a\nfully-qualified build target is as follows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"[A-Za-z0-9._-]*//[A-Za-z0-9/._-]*:[A-Za-z0-9_/.=,@~+-]+\n|- cell name -|  | package path | |--- target name ----|\n")),(0,r.mdx)("p",null,"In Buck2, a ",(0,r.mdx)("em",{parentName:"p"},"cell")," defines a directory tree of one or more Buck2 packages. For\nmore information about Buck2 cells and their relationship to packages and\nprojects, see the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/concepts/key_concepts"},"Key Concepts")," topic. ",(0,r.mdx)("strong",{parentName:"p"},"NOTE:")," All target\npaths are assumed to start from the root of the Buck2 project. Buck2 does not\nsupport specifying a target path that starts from a directory below the root.\nAlthough the double forward slash (",(0,r.mdx)("inlineCode",{parentName:"p"},"//"),") that prefixes target paths can be\nomitted when specifying a target from the command line (see ",(0,r.mdx)("strong",{parentName:"p"},"Pro Tips")," below),\nBuck2 still assumes that the path is from the root. Buck2 does support\n",(0,r.mdx)("em",{parentName:"p"},"relative")," build paths, but in Buck2, that concept refers to specifying build\ntargets ",(0,r.mdx)("em",{parentName:"p"},"from within")," a build file. See ",(0,r.mdx)("strong",{parentName:"p"},"Relative build targets")," below for\nmore details."),(0,r.mdx)("h4",{id:"relative-build-targets"},"Relative build targets"),(0,r.mdx)("p",null,"A ",(0,r.mdx)("em",{parentName:"p"},"relative")," build target can be used to reference a build target ",(0,r.mdx)("em",{parentName:"p"},"within the\nsame "),(0,r.mdx)("a",{parentName:"p",href:"/docs/concepts/build_file"},(0,r.mdx)("em",{parentName:"a"},"build file")),". A relative build target starts with a colon\n(",(0,r.mdx)("inlineCode",{parentName:"p"},":"),") and is followed by only the third component (or ",(0,r.mdx)("em",{parentName:"p"},"short name"),") of the\nfully-qualified build target. The following snippet from a build file shows an\nexample of using a relative path."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"## Assume this target is in //java/com/facebook/share/BUCK#\njava_binary(\n  name = 'ui_jar',\n  deps = [## The following target path##   //java/com/facebook/share:ui## is the same as using the following relative path.#':ui',],)\n")),(0,r.mdx)("h2",{id:"command-line-pro-tips"},"Command-line Pro Tips"),(0,r.mdx)("p",null,"Here are some ways that you can reduce your typing when you specify build\ntargets as command-line arguments to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2 build")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2 run")," commands.\nConsider the following example of a fully-qualified build target used with the\n",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2 build")," command:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck2 build //java/com/facebook/share:share\n")),(0,r.mdx)("p",null,"Although Buck2 is always strict when parsing build targets in build files, Buck2\nis flexible when parsing build targets on the command-line. Specifically, the\nleading ",(0,r.mdx)("inlineCode",{parentName:"p"},"//")," is optional on the command line, so the above could be:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck2 build java/com/facebook/share:share\n")),(0,r.mdx)("p",null,"Also, if there is a forward slash before the colon, it is ignored, so this could\nalso be written as:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck2 build java/com/facebook/share/:share\n")),(0,r.mdx)("p",null,"which enables you to produce the red text shown below using tab-completion,\nwhich dramatically reduces how much you need to type:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck2 build java/com/facebook/share/:share\n")),(0,r.mdx)("p",null,"Finally, if the final path element matches the value specified after the colon,\nit can be omitted:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"# This is treated as //java/com/facebook/share:share.\nbuck2 build java/com/facebook/share/\n")),(0,r.mdx)("p",null,"which makes the build target even easier to tab-complete. For this reason, the\nname of the build target for the primary deliverable in a build file is often\nnamed the same as the parent directory. That way, it can be built from the\ncommand-line with less typing."),(0,r.mdx)("h2",{id:"see-also"},"See also"),(0,r.mdx)("p",null,"Buck2 supports the ability to define ",(0,r.mdx)("strong",{parentName:"p"},(0,r.mdx)("em",{parentName:"strong"},"aliases")," for build targets"),"; using\naliases can improve brevity when specifying targets on the Buck2 command line.\nFor more information, see the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/concepts/buckconfig#alias"},(0,r.mdx)("inlineCode",{parentName:"a"},"[alias]"))," section in the\ndocumentation for ",(0,r.mdx)("a",{parentName:"p",href:"/docs/concepts/buckconfig"},(0,r.mdx)("inlineCode",{parentName:"a"},".buckconfig")),". A\n",(0,r.mdx)("a",{parentName:"p",href:"/docs/concepts/target_pattern"},(0,r.mdx)("strong",{parentName:"a"},"build target pattern"))," is a string that describes a set\nof one or more build targets. For example, the pattern ",(0,r.mdx)("inlineCode",{parentName:"p"},"//...")," is used to build\nan entire project. For more information, see the ",(0,r.mdx)("strong",{parentName:"p"},"Build Target Pattern")," topic."))}u.isMDXComponent=!0}}]);