"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8598],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>u,MDXProvider:()=>x,mdx:()=>m,useMDXComponents:()=>p,withMDXComponents:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),d=function(e){return function(t){var r=p(t.components);return n.createElement(e,l({},t,{components:r}))}},p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},x=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),x=a,c=d["".concat(o,".").concat(x)]||d[x]||b[x]||l;return r?n.createElement(c,i(i({ref:t},u),{},{components:r})):n.createElement(c,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},45882:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const l={id:"bxl.AqueryContext"},o="bxl.AqueryContext type",i={unversionedId:"api/bxl/bxl.AqueryContext",id:"api/bxl/bxl.AqueryContext",title:"bxl.AqueryContext type",description:"The context for performing aquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within aquery command.",source:"@site/../docs/api/bxl/bxl.AqueryContext.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/bxl.AqueryContext",permalink:"/docs/api/bxl/bxl.AqueryContext",draft:!1,tags:[],version:"current",frontMatter:{id:"bxl.AqueryContext"},sidebar:"apiSidebar",previous:{title:"bxl.AnalysisResult type",permalink:"/docs/api/bxl/bxl.AnalysisResult"},next:{title:"bxl.AuditContext type",permalink:"/docs/api/bxl/bxl.AuditContext"}},s={},u=[{value:"bxl.AqueryContext.all_actions",id:"bxlaquerycontextall_actions",level:2},{value:"bxl.AqueryContext.all_outputs",id:"bxlaquerycontextall_outputs",level:2},{value:"bxl.AqueryContext.attrfilter",id:"bxlaquerycontextattrfilter",level:2},{value:"bxl.AqueryContext.deps",id:"bxlaquerycontextdeps",level:2},{value:"bxl.AqueryContext.eval",id:"bxlaquerycontexteval",level:2}],d={toc:u};function p(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"bxlaquerycontext-type"},(0,a.mdx)("inlineCode",{parentName:"h1"},"bxl.AqueryContext")," type"),(0,a.mdx)("p",null,"The context for performing ",(0,a.mdx)("inlineCode",{parentName:"p"},"aquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within aquery command."),(0,a.mdx)("p",null,"Query results are ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_set"),"s of ",(0,a.mdx)("inlineCode",{parentName:"p"},"action_query_node"),"s, which supports iteration,\nindexing, ",(0,a.mdx)("inlineCode",{parentName:"p"},"len()"),", set addition/subtraction, and ",(0,a.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,a.mdx)("h2",{id:"bxlaquerycontextall_actions"},"bxl.AqueryContext.all","_","actions"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.AqueryContext.all_actions(\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label | target_set | target_set | target_set | target_set | list[bxl.ActionQueryNode | bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label]\n) -> target_set\n")),(0,a.mdx)("p",null,"Obtain all the actions declared within the analysis of a given target."),(0,a.mdx)("p",null,"This operation only makes sense on a target literal (it is a simple passthrough when passed\nan action)."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlaquerycontextall_outputs"},"bxl.AqueryContext.all","_","outputs"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.AqueryContext.all_outputs(\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label | target_set | target_set | target_set | target_set | list[bxl.ActionQueryNode | bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label]\n) -> target_set\n")),(0,a.mdx)("p",null,"Obtain the actions for all the outputs provided by the ",(0,a.mdx)("inlineCode",{parentName:"p"},"DefaultInfo")," for the targets passed as input. This includes both the ",(0,a.mdx)("inlineCode",{parentName:"p"},"default_outputs")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"other_outputs"),"."),(0,a.mdx)("p",null,"This operation only makes sense on a target literal (it does nothing if passed something\nelse)."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlaquerycontextattrfilter"},"bxl.AqueryContext.attrfilter"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.AqueryContext.attrfilter(\n    attr: str,\n    value: str,\n    targets: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label | target_set | target_set | target_set | target_set | list[bxl.ActionQueryNode | bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label]\n) -> target_set\n")),(0,a.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlaquerycontextdeps"},"bxl.AqueryContext.deps"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.AqueryContext.deps(\n    universe: bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label | target_set | target_set | target_set | target_set | list[bxl.ActionQueryNode | bxl.ConfiguredTargetNode | bxl.UnconfiguredTargetNode | configured_target_label | label | providers_label | str | target_label],\n    depth: None | int = None,\n    filter: None | str = None\n) -> target_set\n")),(0,a.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlaquerycontexteval"},"bxl.AqueryContext.eval"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.AqueryContext.eval(\n    query: str,\n    query_args: None | target_set | list[str] = None\n)\n")),(0,a.mdx)("p",null,"Evaluates some general query string. ",(0,a.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings. Returns a ",(0,a.mdx)("inlineCode",{parentName:"p"},"dict")," of target labels mapped to their ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_set")," results if ",(0,a.mdx)("inlineCode",{parentName:"p"},"query_args")," was passed in, otherwise returns a single ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_set"),"."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result = ctx.aquery().eval(":foo")\n    ctx.output.print(result)\n')))}p.isMDXComponent=!0}}]);