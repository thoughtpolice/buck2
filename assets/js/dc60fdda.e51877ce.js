"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4929],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>m,useMDXComponents:()=>d,withMDXComponents:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},l.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),g=function(e){return function(t){var r=d(t.components);return a.createElement(e,l({},t,{components:r}))}},d=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},_="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),g=d(r),p=n,_=g["".concat(o,".").concat(p)]||g[p]||f[p]||l;return r?a.createElement(_,i(i({ref:t},c),{},{components:r})):a.createElement(_,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=b;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[_]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},66010:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=r(87462),n=(r(67294),r(3905));const l={id:"configured_target_label"},o="configured_target_label type",i={unversionedId:"api/build/configured_target_label",id:"api/build/configured_target_label",title:"configured_target_label type",description:"configured\\target\\label.cell",source:"@site/../docs/api/build/configured_target_label.generated.md",sourceDirName:"api/build",slug:"/api/build/configured_target_label",permalink:"/docs/api/build/configured_target_label",draft:!1,tags:[],version:"current",frontMatter:{id:"configured_target_label"},sidebar:"apiSidebar",previous:{title:"cmd_args type",permalink:"/docs/api/build/cmd_args"},next:{title:"context type",permalink:"/docs/api/build/context"}},u={},c=[{value:"configured_target_label.cell",id:"configured_target_labelcell",level:2},{value:"configured_target_label.config",id:"configured_target_labelconfig",level:2},{value:"configured_target_label.name",id:"configured_target_labelname",level:2},{value:"configured_target_label.package",id:"configured_target_labelpackage",level:2},{value:"configured_target_label.path",id:"configured_target_labelpath",level:2},{value:"configured_target_label.raw_target",id:"configured_target_labelraw_target",level:2},{value:"configured_target_label.with_sub_target",id:"configured_target_labelwith_sub_target",level:2}],g={toc:c};function d(e){let{components:t,...r}=e;return(0,n.mdx)("wrapper",(0,a.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"configured_target_label-type"},(0,n.mdx)("inlineCode",{parentName:"h1"},"configured_target_label")," type"),(0,n.mdx)("h2",{id:"configured_target_labelcell"},"configured","_","target","_","label.cell"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"configured_target_label.cell: str\n")),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"configured_target_labelconfig"},"configured","_","target","_","label.config"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def configured_target_label.config() -> configuration\n")),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"configured_target_labelname"},"configured","_","target","_","label.name"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"configured_target_label.name: str\n")),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"configured_target_labelpackage"},"configured","_","target","_","label.package"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"configured_target_label.package: str\n")),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"configured_target_labelpath"},"configured","_","target","_","label.path"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"configured_target_label.path: label_relative_path\n")),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"configured_target_labelraw_target"},"configured","_","target","_","label.raw","_","target"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def configured_target_label.raw_target() -> target_label\n")),(0,n.mdx)("p",null,"Returns the unconfigured underlying target label."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"configured_target_labelwith_sub_target"},"configured","_","target","_","label.with","_","sub","_","target"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def configured_target_label.with_sub_target(\n    subtarget_name: str | list[str] = _\n) -> label\n")),(0,n.mdx)("p",null,"Converts a ",(0,n.mdx)("inlineCode",{parentName:"p"},"ConfiguredTargetLabel")," into its corresponding ",(0,n.mdx)("inlineCode",{parentName:"p"},"Label")," given the subtarget name which is a list for each layer of subtarget"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_sub_target(ctx):\n    owners = ctx.cquery().owner("bin/TARGETS.fixture")\n    for owner in owners:\n        configured_label = owner.label\n        ctx.output.print(configured_label.with_sub_target())\n        ctx.output.print(configured_label.with_sub_target("subtarget1"))\n        ctx.output.print(configured_label.with_sub_target(["subtarget1", "subtarget2"]))\n')))}d.isMDXComponent=!0}}]);