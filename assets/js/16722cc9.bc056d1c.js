"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3754],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>p});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),p=function(e){return function(n){var t=m(n.components);return a.createElement(e,r({},n,{components:t}))}},m=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(t),c=o,u=p["".concat(i,".").concat(c)]||p[c]||h[c]||r;return t?a.createElement(u,l(l({ref:n},d),{},{components:t})):a.createElement(u,l({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},26910:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const r={id:"logging",title:"Logging"},i=void 0,l={unversionedId:"users/build_observability/logging",id:"users/build_observability/logging",title:"Logging",description:"Buck2 produces detailed event logs for each invocation, which follow a schema",source:"@site/../docs/users/build_observability/logging.md",sourceDirName:"users/build_observability",slug:"/users/build_observability/logging",permalink:"/docs/users/build_observability/logging",draft:!1,tags:[],version:"current",frontMatter:{id:"logging",title:"Logging"},sidebar:"mainSidebar",previous:{title:"Buck2 Consoles",permalink:"/docs/users/build_observability/interactive_console"},next:{title:"Build Report",permalink:"/docs/users/build_observability/build_report"}},s={},d=[{value:"Event log format",id:"event-log-format",level:2},{value:"Invocation header",id:"invocation-header",level:3},{value:"Command result footer",id:"command-result-footer",level:3},{value:"Buck events",id:"buck-events",level:3},{value:"Span starts",id:"span-starts",level:4},{value:"Span ends",id:"span-ends",level:4},{value:"Instant events",id:"instant-events",level:4},{value:"Viewing the event log",id:"viewing-the-event-log",level:2}],p=(m="FbInternalOnly",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var m;const c={toc:d};function u(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Buck2 produces detailed event logs for each invocation, which follow a schema\noutlined in ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/buck2_data/data.proto")," in the buck2 parent directory. The event\nlogs that Buck2 produces automatically are always in protobuf zstd-compressed\nformat (see ",(0,o.mdx)("a",{parentName:"p",href:"#viewing-the-event-log"},"Viewing the event log")," for more details)."),(0,o.mdx)("h2",{id:"event-log-format"},"Event log format"),(0,o.mdx)("p",null,"Warning: the schemas are all subject to change, so we do not recommend relying\non the format. For the source of truth, take a look at ",(0,o.mdx)("inlineCode",{parentName:"p"},"data.proto"),"."),(0,o.mdx)("h3",{id:"invocation-header"},"Invocation header"),(0,o.mdx)("p",null,"The first line of the event log is always the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Invocation")," header:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"Invocation {\n    # CLI args split into a list of strings\n    command_line_args: List[str],\n    # Expanded CLI args, which expand any argsfiles\n    expanded_command_line_args: List[str],\n    # Absolute path of the current working directory of the Buck2 command\n    working_dir: str,\n    # UUID of the Buck2 command\n    trace_id: str,\n}\n")),(0,o.mdx)("h3",{id:"command-result-footer"},"Command result footer"),(0,o.mdx)("p",null,"The last line is always the ",(0,o.mdx)("inlineCode",{parentName:"p"},"CommandResult"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"Result {\n    # One of the result types of CommandResult protobuf type in data.proto\n    result: BuildResponse | CqueryResponse | BxlResponse | ...,\n}\n")),(0,o.mdx)("h3",{id:"buck-events"},"Buck events"),(0,o.mdx)("p",null,"The rest of the event log contain ",(0,o.mdx)("inlineCode",{parentName:"p"},"BuckEvent"),"s, which are either\n",(0,o.mdx)("inlineCode",{parentName:"p"},"SpanStartEvent"),"s, ",(0,o.mdx)("inlineCode",{parentName:"p"},"SpanEndEvent"),"s, or ",(0,o.mdx)("inlineCode",{parentName:"p"},"InstantEvent"),"s."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"BuckEvent")," format is roughly as follows:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"Event {\n    # When the event was fired. This is always a 2-item list, where the first\n    # value is millis, second value is micros\n    timestamp: List[u64],\n    # UUID of the Buck2 command, same one as the invocation header\n    trace_id: str,\n    # A trace-unique 64-bit integer identifying this event's span ID,\n    # if this event begins a new span or belongs to one.\n    span_id: u64,\n    # A trace-unique 64-bit identifying the span that this event is logically\n    # parented to.\n    parent_id: u64,\n    # See sections below for more details\n    data: SpanStart | SpanEnd | Instant,\n}\n")),(0,o.mdx)("h4",{id:"span-starts"},"Span starts"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"SpanStartEvent")," indicates that a span of work starting:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"SpanStart {\n    # One of the data types of SpanStartEvent protobuf type in data.proto\n    data: AnalysisStart | ActionExecutionStart | ...,\n}\n")),(0,o.mdx)("h4",{id:"span-ends"},"Span ends"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"SpanEndEvent")," indicates that a span of work has finished:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"SpanEnd {\n    # Duration of the span\n    duration_us: u64,\n    # CPU poll times for this span\n    stats: SpanStats,\n    # One of the data types of SpanEndEvent protobuf type in data.proto\n    data: AnalysisEnd | ActionExecutionEnd | ...,\n}\n\n# CPU poll times for this span\nSpanStats {\n  max_poll_time_us: u64,\n  total_poll_time_us: u64,\n}\n")),(0,o.mdx)("h4",{id:"instant-events"},"Instant events"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"InstantEvent")," represents a single point in time:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"InstantEvent {\n    # One of the data types of InstantEvent protobuf type in data.proto\n    data: ConsoleMessage | ActionError | ...,\n}\n")),(0,o.mdx)("p",null,"One specific instant event type that may be of interest is the ",(0,o.mdx)("inlineCode",{parentName:"p"},"SnapShot")," event,\nwhich includes some interesting details like RSS, CPU, I/O, remote execution,\nand DICE metrics."),(0,o.mdx)("h2",{id:"viewing-the-event-log"},"Viewing the event log"),(0,o.mdx)("p",null,"Event logs can be accessed using commands under ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2 log show"),", which outputs\nthe event logs in JSONL format. You can run ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2 log show --help")," to see all\navailable options. Some useful commands:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Show the logs for the most recent Buck2 command:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 log show\n")),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Show the logs for a specific Buck2 command, given the command's UUID:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 log show --trace-id <UUID>\n")),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Show the logs for a recent Buck2 command:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 log show --recent <NUMBER>\n")),(0,o.mdx)(p,{mdxType:"FbInternalOnly"},(0,o.mdx)("p",null,"You can also download the logs locally from Buck2 UI. The logs will be\ndownloaded from Manifold in protobuf zstd-compressed format, and you can view\nthem in JSONL format by passing the path into ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2 log show"),".")),(0,o.mdx)("p",null,"The JSON schema is derived from the protobuf types, and the log itself could be\nquite large. ",(0,o.mdx)("a",{parentName:"p",href:"https://jqlang.github.io/jq/"},"jq")," can be useful to find specific\nthings. For example, this jq script shows the max event delay between a snapshot\nevent creation on the daemon side, and when the client receives it."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 log show | jq -s '\n  map(\n    .Event.data.Instant.data.Snapshot.this_event_client_delay_ms\n      | select(. != null)\n  ) | max'\n")))}u.isMDXComponent=!0}}]);