"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9685],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>p});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=a.createContext({}),p=function(e){return function(n){var t=d(n.components);return a.createElement(e,o({},n,{components:t}))}},d=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(m.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(t),u=r,c=p["".concat(i,".").concat(u)]||p[u]||h[u]||o;return t?a.createElement(c,l(l({ref:n},m),{},{components:t})):a.createElement(c,l({ref:n},m))}));function x(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},18860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=t(87462),r=(t(67294),t(3905));const o={id:"anon_targets",title:"Anonymous Targets"},i=void 0,l={unversionedId:"rule_authors/anon_targets",id:"rule_authors/anon_targets",title:"Anonymous Targets",description:"An anonymous target is defined by the hash of its attributes, rather than its",source:"@site/../docs/rule_authors/anon_targets.md",sourceDirName:"rule_authors",slug:"/rule_authors/anon_targets",permalink:"/docs/rule_authors/anon_targets",draft:!1,tags:[],version:"current",frontMatter:{id:"anon_targets",title:"Anonymous Targets"},sidebar:"mainSidebar",previous:{title:"Dynamic Dependencies",permalink:"/docs/rule_authors/dynamic_dependencies"},next:{title:"Test Execution",permalink:"/docs/rule_authors/test_execution"}},s={},m=[{value:"Anon rule",id:"anon-rule",level:2},{value:"Anon target",id:"anon-target",level:2},{value:"<code>AnonTarget</code> and <code>AnonTargets</code>",id:"anontarget-and-anontargets",level:3},{value:"Attribute resolution",id:"attribute-resolution",level:2},{value:"<code>name</code> attribute example",id:"name-attribute-example",level:3},{value:"Simple Example",id:"simple-example",level:2},{value:"Longer example",id:"longer-example",level:2},{value:"Convert promise to artifact",id:"convert-promise-to-artifact",level:2}],p={toc:m};function d(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"An anonymous target is defined by the hash of its attributes, rather than its\nname. During analysis, rules can define and access the providers of anonymous\ntargets before producing their own providers. Two distinct rules might ask for\nthe same anonymous target, sharing the work it performs."),(0,r.mdx)("p",null,"This solves two distinct problems:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"The sharing problem")," - if you have two processes that want to share some\nwork, you can create an anon target that does that work once, which is then\nreused by the two processes. Without such a mechanism, all sharing must be\npresent in the target graph: you can't create any new sharing."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"The overlay problem")," - this is the idea that you want to have a\nshadow-graph, similar in structure to the normal graph, but with additional\ninformation attached. Bazel accomplishes this with\n",(0,r.mdx)("a",{parentName:"li",href:"https://bazel.build/extending/aspects"},"Aspects"),". With Anonymous (anon)\ntargets, you can create a shadow-graph by convention, just by using the target\nname you wish to shadow as the attribute.")),(0,r.mdx)("p",null,"Dynamic dependencies, in their full generality, enable users to do a thing, look\nat the result, then ask for fresh things. However, this full generality is not\nprovided as it breaks processes, like query, that power the Target Determinator."),(0,r.mdx)("p",null,"In Buck2, dynamic dependencies are implemented using ",(0,r.mdx)("inlineCode",{parentName:"p"},"dynamic_output"),", which\nprovides users with the ability to create new actions, after running actions,\nthen look at the result. ",(0,r.mdx)("inlineCode",{parentName:"p"},"dynamic_output")," is restricted in its power when\ncompared to fully generic dynamic dependencies, as detailed in the\n",(0,r.mdx)("a",{parentName:"p",href:"/docs/rule_authors/dynamic_dependencies"},"Dynamic Dependencies")," page."),(0,r.mdx)("p",null,"Anon targets enable users to create a new analysis (that is, call an anon target\nthat may not have existed before) after looking at the result of a previous\nanalysis (which is passed in, or after looking at an anon target). In many ways,\nanon target is the version of ",(0,r.mdx)("inlineCode",{parentName:"p"},"dynamic_output")," at analysis time, rather than\naction time."),(0,r.mdx)("p",null,"The execution platform for an anon target is that of the inherited from the\ncalling target, which is part of the hash. If that is too restrictive, you could\nuse execution groups, where an anon target gets told which execution group to\nuse."),(0,r.mdx)("h1",{id:"creating-anon-targets"},"Creating anon targets"),(0,r.mdx)("h2",{id:"anon-rule"},"Anon rule"),(0,r.mdx)("p",null,"An anonymous rule is defined using ",(0,r.mdx)("inlineCode",{parentName:"p"},"rule")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"anon_rule"),"."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"my_anon_rule = rule(\n    impl = _anon_impl,\n    attrs = {},\n)\n\n# Or:\n\nmy_anon_rule = anon_rule(\n    impl = _anon_impl,\n    attrs = {},\n    artifact_promise_mappings = {} # only available for anon_rule\n)\n")),(0,r.mdx)("p",null,"For ",(0,r.mdx)("inlineCode",{parentName:"p"},"rule"),", these are normal rules, with the difference that they are not in a\nconfiguration, so ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.actions.label")," won't show configuration information, but\njust ",(0,r.mdx)("inlineCode",{parentName:"p"},"unspecified"),"."),(0,r.mdx)("p",null,"For ",(0,r.mdx)("inlineCode",{parentName:"p"},"anon_rule"),", the configuration restrictions also apply, and there is an\n",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact_promise_mappings")," field which you can specify a dict of artifact\npromise names to the map function, which would be applied to the anon target's\npromise during rule resolution."),(0,r.mdx)("h2",{id:"anon-target"},"Anon target"),(0,r.mdx)("p",null,"An anonymous rule is used via ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.actions.anon_target")," or\n",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.actions.anon_targets"),", passing in the rule and the attributes for the rule."),(0,r.mdx)("p",null,"The return values of those functions are a ",(0,r.mdx)("inlineCode",{parentName:"p"},"AnonTarget")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"AnonTargets")," type,\nrespectively."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"my_anon_rule1 = anon_rule(\n    impl = _anon_impl,\n    attrs = {},\n    artifact_promise_mappings = {}\n)\n\nmy_anon_rule2 = anon_rule(\n    impl = _anon_impl,\n    attrs = {},\n    artifact_promise_mappings = {}\n)\n\n# <elsewhere>\nanon_target = ctx.actions.anon_target(my_anon_rule1, {})\n\nanon_targets = ctx.actions.anon_targets([(my_anon_rule1, {}), (my_anon_rule2, {})])\n")),(0,r.mdx)("h3",{id:"anontarget-and-anontargets"},(0,r.mdx)("inlineCode",{parentName:"h3"},"AnonTarget")," and ",(0,r.mdx)("inlineCode",{parentName:"h3"},"AnonTargets")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"AnonTarget")," has a ",(0,r.mdx)("inlineCode",{parentName:"p"},"promise")," attribute, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact()")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifacts()"),"\nfunctions. ",(0,r.mdx)("inlineCode",{parentName:"p"},"AnonTargets")," has a ",(0,r.mdx)("inlineCode",{parentName:"p"},"promise")," attribute and ",(0,r.mdx)("inlineCode",{parentName:"p"},"anon_targets")," attribute."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"promise")," attribute for both types returns the anon target's promise (type\nis ",(0,r.mdx)("inlineCode",{parentName:"p"},"promise"),"), which when evaluated returns the providers of the anonymous\ntarget. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"promise")," type has a few special behaviors."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"It has a ",(0,r.mdx)("inlineCode",{parentName:"li"},"map")," function, which takes a function and applies it to the future,\nreturning a new future"),(0,r.mdx)("li",{parentName:"ul"},"All promises will eventually resolve to a list of providers")),(0,r.mdx)("p",null,"For ",(0,r.mdx)("inlineCode",{parentName:"p"},"AnonTarget"),", the ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact()")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifacts()")," functions only return\nsomething if using ",(0,r.mdx)("inlineCode",{parentName:"p"},"anon_rule"),". ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact()")," takes in an artifact name, which\nshould be found in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact_promise_mappings")," dict, and returns the\nartifact promise. ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifacts()")," returns the dict of all promise artifact names\nto the artifact promise itself, as defined in ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact_promise_mappings"),". See\n",(0,r.mdx)("a",{parentName:"p",href:"#convert-promise-to-artifact"},"Convert promise to artifact")," below for more\ninformation about artifact promises."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'HelloInfo = provider(fields = ["output"])\n\nmy_anon_rule = anon_rule(\n    impl = _anon_impl,\n    attrs = {},\n    artifact_promise_mappings = {\n        "hello": lambda x: x[HelloInfo].output,\n    }\n)\n\n# <elsewhere>\nanon_target = ctx.actions.anon_target(my_anon_rule, {})\nartifact = anon_target.artifact("hello")\nartifact_from_dict = anon_target.artifacts()["hello"]\n')),(0,r.mdx)("p",null,"For ",(0,r.mdx)("inlineCode",{parentName:"p"},"AnonTargets"),", the ",(0,r.mdx)("inlineCode",{parentName:"p"},"anon_targets")," attribute returns a list of the underlying\n",(0,r.mdx)("inlineCode",{parentName:"p"},"AnonTarget"),"s."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'HelloInfo = provider(fields = ["output"])\nGoodbyeInfo = provider(fields = ["output"])\n\nmy_anon_rule1 = anon_rule(\n    impl = _anon_impl,\n    attrs = {},\n    artifact_promise_mappings = {\n        "hello": lambda x: x[HelloInfo].output,\n    }\n)\n\nmy_anon_rule2 = anon_rule(\n    impl = _anon_impl,\n    attrs = {},\n    artifact_promise_mappings = {\n        "goodbye": lambda x: x[GoodbyeInfo].output,\n    }\n)\n\n# <elsewhere>\nall_targets = ctx.actions.anon_targets([(my_anon_rule1, {}), (my_anon_rule2, {})])\nhello = all_targets.anon_targets[0].artifact("hello")\ngoodbye = all_targets.anon_targets[1].artifact("goodbye")\n')),(0,r.mdx)("h1",{id:"attributes"},"Attributes"),(0,r.mdx)("p",null,"Anon targets only support a subset of attributes that normal rules support."),(0,r.mdx)("p",null,"Supported attributes:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"bool")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"int")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"str")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"enum")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"dep"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"deps")," attributes do not take strings, but dependencies, already in a\nconfiguration"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"exec_deps")," are available if the passed in ",(0,r.mdx)("inlineCode",{parentName:"li"},"dep"),"'s execution platform\nmatches"),(0,r.mdx)("li",{parentName:"ul"},"Default ",(0,r.mdx)("inlineCode",{parentName:"li"},"attr.deps")," (as used for toolchains) are not permitted, as the\ndefault can't express a dependency. They must be passed forward from the\ncaller. that of the anon target's caller"))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"source"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Accepts bound artifacts or promise artifacts"))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"arg"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Can only be used if ",(0,r.mdx)("inlineCode",{parentName:"li"},"anon_target_compatible")," is ",(0,r.mdx)("inlineCode",{parentName:"li"},"True")," when declaring\n",(0,r.mdx)("inlineCode",{parentName:"li"},"attrs.arg")," (ex: ",(0,r.mdx)("inlineCode",{parentName:"li"},"attrs.arg(anon_target_compatible = True)"),")"))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"label")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"list")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"tuple")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"dict")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"one_of")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"option"))),(0,r.mdx)("p",null,"You can use these attributes like you would in normal rules:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'my_anon_rule = anon_rule(\n    impl = _my_anon_impl,\n    attrs = {\n        "my_int": attrs.int(),\n        "my_string_with_default": attrs.string(default = "foo"),\n        "my_optional_source": attrs.option(attrs.source()),\n        "my_list_of_labels": attrs.list(attrs.label()),\n    },\n    artifact_promise_mappings = {}\n)\n\ndef _my_anon_impl(ctx: AnalysisContext) -> list[Provider]:\n    my_int = ctx.attrs.my_int\n    my_string_with_default = ctx.attrs.my_string_with_default\n    my_optional_source = ctx.attrs.my_optional_source\n    my_list_of_labels = ctx.attrs.my_list_of_labels\n\n    # do something with the attributes...\n\n    return [DefaultInfo()]\n')),(0,r.mdx)("h2",{id:"attribute-resolution"},"Attribute resolution"),(0,r.mdx)("p",null,"Attribute resolution is handled differently from normal code:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Transitions and more complex forms of attributes are banned."),(0,r.mdx)("li",{parentName:"ul"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"name")," attribute is a reserved attribute. It is an implicit attribute when\ndefining a rule for an anon target, but can be optionally set when creating an\nanon target. If present, it must be a syntactically valid target, but could\nrefer to a cell/package that does not exist. If not present, buck2 will\ngenerate a name for the target automatically.")),(0,r.mdx)("h3",{id:"name-attribute-example"},(0,r.mdx)("inlineCode",{parentName:"h3"},"name")," attribute example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'# Rule definition for anon target\nmy_rule = rule(\n    impl = _my_impl,\n    attrs = {\n        # `name` is already implicitly defined as an attribute, and will error\n        # out if you try to define it again during rule declaration\n    },\n)\n\n# Anon target instantiation, elsewhere\n ctx.actions.anon_target(\n    my_rule,\n    {\n        # you can optionally pass `name` into the attributes even though it\'s\n        # not explicitly defined in the `attrs` field for `my_rule`\n        "name": "foo//bar:baz"\n    },\n)\n')),(0,r.mdx)("p",null,"To access the ",(0,r.mdx)("inlineCode",{parentName:"p"},"name")," attribute from an analysis context, you can use\n",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.label.name"),"."),(0,r.mdx)("h1",{id:"examples"},"Examples"),(0,r.mdx)("h2",{id:"simple-example"},"Simple Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'# Define an anonymous rule\nUpperInfo = provider(fields = ["message"])\n\ndef _impl_upper(ctx):\n    return [UpperInfo(message = ctx.attrs.message.upper()]\n\nupper = rule(\n    attrs = {"message", attrs.string()},\n    impl = _impl_upper\n)\n\n# Use an anonymous target\ndef impl(ctx):\n    def k(providers):\n        print(providers[UpperInfo].message)\n        # These are the providers this target returns\n        return [DefaultInfo()]\n    return ctx.actions.anon_target(upper, {\n        name: "my//:greeting",\n        message: "Hello World",\n    })\n    .promise\n    .map(k)\n')),(0,r.mdx)("h2",{id:"longer-example"},"Longer example"),(0,r.mdx)("p",null,"The following code represents a scenario for a compile-and-link language where,\nif two targets end up compiling the same file (for example, they are in the same\npackage and both list it, or it gets export_file'd), then that file is compiled\njust once:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'## BUCK ##############\n@load(":silly.bzl", "silly_binary")\n\nsilly_binary(\n    name = "hello",\n    srcs = ["hello.sil", "world.sil"],\n)\n\n## silly.bzl ############\n\n_SillyCompilation = provider(fields = ["compiled"])\n\ndef _silly_compilation_impl(ctx):\n    out = ctx.actions.declare_output("output.o")\n    ctx.actions.run(cmd_args(\n        ctx.attrs.toolchain.compiler,\n        ctx.attrs.src,\n        "-o",\n        out.as_output(),\n    ))\n    return [DefaultInfo(), _SillyCompilation(compiled = out)]\n\n_silly_compilation = rule(\n    impl = _silly_compilation_impl,\n    attrs = {\n        "src": attrs.src(),\n        "toolchain": attrs.dep(),\n    },\n)\n\ndef _silly_binary_impl(ctx):\n    def k(providers):\n        # Step 2: now link them all together\n        out = ctx.actions.declare_output("out.exe")\n        objs = [p[_SillyCompilation].compiled for p in providers]\n        ctx.actions.run(cmd_args(\n            ctx.attrs._silly_toolchain.linker,\n            objs,\n            "-o",\n            out.as_output(),\n        ))\n        return [\n            DefaultInfo(default_output = out),\n            RunInfo(args = out),\n        ]\n\n    # Step 1: compile all my individual files\n    return ctx.actions.anon_targets(\n        [(_silly_compilation, {\n            "src": src,\n            "toolchain": ctx.attrs._silly_toolchain\n        }) for src in ctx.attrs.srcs]\n    ).map(k)\n\nsilly_binary = rule(\n    impl = _silly_binary_impl,\n    attrs = {\n        "srcs": attr.list(attr.src()),\n        "_silly_toolchain": attr.dep(default = "toolchains//:silly"),\n    },\n)\n')),(0,r.mdx)("h2",{id:"convert-promise-to-artifact"},"Convert promise to artifact"),(0,r.mdx)("p",null,"It can be challenging to pass around the promises from anon_target and structure\nfunctions to support that. If you only need an artifact (or multiple artifacts)\nfrom an anon_target, you can use ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact()")," function on the anon target to\nconvert a promise to an artifact. This artifact can be passed to most things\nthat expect artifacts, but until it is resolved (at the end of the current\nanalysis) it can't be inspected with artifact functions like ",(0,r.mdx)("inlineCode",{parentName:"p"},".extension"),", etc.\n",(0,r.mdx)("inlineCode",{parentName:"p"},".short_path")," is supported if ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.actions.assert_short_path()")," was called,\nwhich produces an artifact type. The promise must resolve to a build (not\nsource) artifact with no associated artifacts."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'HelloInfo = provider(fields = ["hello", "world"])\n\ndef _anon_impl(ctx: AnalysisContext) -> ["provider"]:\n    hello = ctx.actions.write("hello.out", "hello")\n    world = ctx.actions.write("world.out", "world")\n    return [DefaultInfo(), HelloInfo(hello = hello, world = world)]\n\n_anon = anon_rule(\n    impl = _anon_impl,\n    attrs = {},\n    artifact_promise_mappings = {\n        "hello": lambda x: x[HelloInfo].hello,\n        "world": lambda x: x[HelloInfo].world,\n    }\n)\n\ndef _use_impl(ctx: AnalysisContext) -> ["provider"]:\n    anon = ctx.actions.anon_target(_anon, {})\n    hello_artifact = anon.artifact("hello")\n    world_artifact = anon.artifact("world")\n\n    out = ctx.actions.declare_output("output")\n    ctx.actions.run([\n            ctx.attrs.some_tool,\n            hello_artifact,\n            world_artifact,\n            out.as_output()\n        ], category = "process")\n    return [DefaultInfo(default_output = out)]\n\nuse_promise_artifact = rule(impl = _use_impl, attrs = {\n    "some_tool": attr.exec_dep(),\n})\n')))}d.isMDXComponent=!0}}]);