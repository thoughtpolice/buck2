"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9525],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>b,useMDXComponents:()=>d,withMDXComponents:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),u=function(e){return function(t){var n=d(t.components);return r.createElement(e,o({},t,{components:n}))}},d=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(m.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,p=u["".concat(i,".").concat(c)]||u[c]||h[c]||o;return n?r.createElement(p,s(s({ref:t},m),{},{components:n})):r.createElement(p,s({ref:t},m))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},18887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={id:"compared_to_buck1",title:"Benefits When Compared to Buck1"},i=void 0,s={unversionedId:"about/benefits/compared_to_buck1",id:"about/benefits/compared_to_buck1",title:"Benefits When Compared to Buck1",description:"For reports from real users, see the Testimonials, which",source:"@site/../docs/about/benefits/compared_to_buck1.md",sourceDirName:"about/benefits",slug:"/about/benefits/compared_to_buck1",permalink:"/docs/about/benefits/compared_to_buck1",draft:!1,tags:[],version:"current",frontMatter:{id:"compared_to_buck1",title:"Benefits When Compared to Buck1"},sidebar:"mainSidebar",previous:{title:"Getting Started",permalink:"/docs/about/getting_started"},next:{title:"Bootstrapping Buck2",permalink:"/docs/about/bootstrapping"}},l={},m=[{value:"Benefits for end users",id:"benefits-for-end-users",level:2},{value:"Benefits for Rule Authors",id:"benefits-for-rule-authors",level:2},{value:"Benefits for Integrators",id:"benefits-for-integrators",level:2},{value:"The downside",id:"the-downside",level:2}],u=(d="FbInternalOnly",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",e)});var d;const c={toc:m};function p(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)(u,{mdxType:"FbInternalOnly"},(0,a.mdx)("p",null,"For reports from real users, see the ",(0,a.mdx)("a",{parentName:"p",href:"testimonials.fb.md"},"Testimonials"),", which\ninclude Workplace posts and their full context.")),(0,a.mdx)("h2",{id:"benefits-for-end-users"},"Benefits for end users"),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("em",{parentName:"p"},'"',(0,a.mdx)("inlineCode",{parentName:"em"},"buck2 build SOME_TARGET_I_ALREADY_BUILT_BEFORE"),' is basically instantaneous\nand is a super delightful experience. \ud83d\ude42"')," - End user experience"),(0,a.mdx)(u,{mdxType:"FbInternalOnly"},"([source](https://fb.prod.workplace.com/groups/buck2users/posts/3030704467185914))")),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("em",{parentName:"p"},'"Buck2 is largely faster and more memory efficient than buck1, and where I\u2019ve\nseen counter-examples, the buck2 team quickly optimizes and fixes that.\ud83d\ude42"')," -\nSoftware Engineer feedback",(0,a.mdx)(u,{mdxType:"FbInternalOnly"},"\n(",(0,a.mdx)("a",{parentName:"p",href:"https://fb.prod.workplace.com/groups/devx.ci.bffs/posts/616830502778501"},"source"),")"))),(0,a.mdx)("p",null,"For people who use Buck on a daily basis (such as using Buck build as part of\ntheir development inner loop), switching to Buck2 provides the following\nbenefits:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Performance")," - the performance of Buck2 is better in four ways:",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},(0,a.mdx)("em",{parentName:"strong"},"Fast things are fast"))," - in Buck1, simply typing ",(0,a.mdx)("inlineCode",{parentName:"li"},"buck build")," when there\nis nothing to do can be expensive (23 seconds in some benchmarks). In Buck2,\nthe same build action takes 0.1 seconds. Actions that should be fast are\nfast, which enables developers to use Buck more freely, without trying to\nwork around the build system."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},(0,a.mdx)("em",{parentName:"strong"},"Slow things are faster"))," - when there is real work to do, Buck2 is\nsignificantly closer to the critical path. Benchmarks range from 5%/10s\nfaster for changing a header file (lots of parallel C++ computations, Buck1\nalready nearly at the critical path) to 42%/145s faster (changing a Thrift\nfile in a large project)."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},(0,a.mdx)("em",{parentName:"strong"},"Users contribute to the shared cache"))," - with Buck1, only trusted CI\nbuilds write to the network cache, while with Buck2 everyone writes to the\ncache through sandboxed remote execution. This increases the chance of cache\nhits, saving capacity and time."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},(0,a.mdx)("em",{parentName:"strong"},"CI builds go faster"))," - these numbers vary day by day, but most projects\nare 2-4x faster. This means spending less time waiting for CI and saving\nsome capacity at the same time."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Correctness")," - in Buck2, rules are hermetic by default. Missing\ndependencies are errors. These restrictions apply to both the user-written\n",(0,a.mdx)("inlineCode",{parentName:"li"},"BUCK")," files and the language rules.",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"During the process of migrating to Buck2, a huge number of missing\ndependencies have been fixed. However, during the same process, several\nBuck1 issues were identified that are not going to be fixed in Buck1 (such\nas missing headers, genrules without dependencies, and OCaml rules don\u2019t\ntrack all deps). The end result is that Buck2 gives the right answer more\noften, cutting down on user surprises."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Rule features")," - the rules in Buck2, especially for less commonly used\nlanguages (such as Haskell, OCaml, and Rust) support features above and beyond\nthose in Buck1.",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Examples: dependencies can be given as arguments to\n",(0,a.mdx)("inlineCode",{parentName:"li"},"prebuilt_ocaml_library"),", Haskell enables the use of stub headers from C++,\nand Rust has experimental pipelining support."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Actively developed")," - the Meta build team is putting all its efforts behind\nBuck2; it's vastly easier to develop than Buck1. While Buck2 is already ahead\nof Buck1 in many important aspects, the difference is only going to grow with\nseveral improvements in the pipeline."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Support")," - Meta can provide much better support to those having\ndifficulties with Buck2 than to those using Buck1.")),(0,a.mdx)("h2",{id:"benefits-for-rule-authors"},"Benefits for Rule Authors"),(0,a.mdx)("p",null,"If you write language-specific rules, then Buck2 is in a different league to\nBuck1."),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("em",{parentName:"p"},'"This is all rather fun! Buck2 rules are so much more hackable than\nBuck1."')," - Software Engineer feedback ",(0,a.mdx)(u,{mdxType:"FbInternalOnly"},"\n(",(0,a.mdx)("a",{parentName:"p",href:"https://fb.prod.workplace.com/groups/333784157210625/posts/928214407767594"},"source"),")"))),(0,a.mdx)("p",null,"There are a number of reasons why Buck2 excels for Rule Authors:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Faster developer cycle")," - in Buck1, the time from changing a rule to seeing\nthe impact is many minutes: you first have to compile Buck1, invalidate the\ndependency cache (and so on), and perhaps work between multiple OSs. With\nBuck2, it takes seconds, you don\u2019t even need to restart the daemon."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Simple API")," - Buck2 rules use a small and documented Starlark API, which is\ndependency-correct by construction. In Buck1, the rules must obey a lot of\nsubtle side conditions with a much larger API."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Easier deployment")," - for Buck2, deployment is just checking the rules in,\nwith an atomic commit changing associated macros (when required). For Buck1,\nyou have to make the repo work with the old and new rules and wait for a Buck\nversion bump to ship your changes, perhaps a few days later."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Low barrier to entry")," - writing rules in Buck2 is vastly easier than Buck1,\nsignificantly increasing the developer pool. This means that writing rules is\nnow accessible to language experts, not just Buck experts.")),(0,a.mdx)("h2",{id:"benefits-for-integrators"},"Benefits for Integrators"),(0,a.mdx)("p",null,"For those people who integrate Buck2 into larger systems, in addition to many of\nthe above benefits apply, Buck2 provides the following benefits:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Faster queries")," - many integrators make extensive use of ",(0,a.mdx)("inlineCode",{parentName:"li"},"buck uquery")," and\n",(0,a.mdx)("inlineCode",{parentName:"li"},"cquery"),". In Buck2, these commands are ",(0,a.mdx)("strong",{parentName:"li"},"faster")," and use ",(0,a.mdx)("strong",{parentName:"li"},"less memory"),".",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"For example, on CI target determination (a bunch of targets/queries), Buck2\nis 25% faster at ",(0,a.mdx)("a",{parentName:"li",href:"https://internalfb.com/P50"},"P50")," (moving to 40% faster at ",(0,a.mdx)("a",{parentName:"li",href:"https://internalfb.com/P95"},"P95"),") with 25% less memory\n(saving over 20Gb, and crossing below the 64Gb threshold)."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Profiling")," - Buck2 already ships with five types of profiling for both\nloading and analysis (flame graphs, statement breakdown, heap profiles etc).\nWith Buck2, these tools are much more easily accessible to people not on the\nBuild Infra team.")),(0,a.mdx)(u,{mdxType:"FbInternalOnly"},(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Eden friendly")," - Buck2 is tuned for the Eden architecture, performing fewer\ndisk operations with greater parallelism.",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"For example, the slowdown caused by using Eden for ",(0,a.mdx)("inlineCode",{parentName:"li"},"targets")," on ",(0,a.mdx)("inlineCode",{parentName:"li"},"fbandroid"),"\nis\n",(0,a.mdx)("a",{parentName:"li",href:"https://fb.workplace.com/groups/132499338763090/posts/132580122088345"},"reduced from 300s to 80s"),"."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Better observability")," - Buck2 populates many Scuba tables with information\nabout\n",(0,a.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/scuba/query/?dataset=buck2_loads"},"loading"),",\n",(0,a.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/scuba/query/?dataset=buck2_analyses"},"analysis"),",\n",(0,a.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/scuba/query/?dataset=buck2_builds"},"builds"),"\nand\n",(0,a.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/scuba/query/?dataset=buck2_action_errors"},"errors"),",\nand more. The architecture of Buck2 ensures that all important information can\nbe recorded in a uniform manner, enabling sensible trade-offs to be made about\nwhat to store vs for how long."))),(0,a.mdx)("h2",{id:"the-downside"},"The downside"),(0,a.mdx)("p",null,"While there are many benefits, it would be remiss not to include a small list of\ntemporary issues:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Stability")," - Buck2 is under active development, which means the risk of\nregression is correspondingly higher. There may be issues, but they will be\nfixed as quickly as possible (and lessons learned) through the through Meta's\nSEV-review process."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Corner cases")," - Buck1 has been battle-tested for nearly a decade, which has\nincluded attention to events such as error messages in unlikely corner cases.\nOnly time and user feedback will enable Meta to bring Buck2 to the same level.\nPlease share all such feedback!")),(0,a.mdx)(u,{mdxType:"FbInternalOnly"},(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Buck2 Web UI")," - there isn\u2019t yet a working Web UI equivalent to the one\nprovided by Buck1. But we\u2019re working on it and hope to share an initial\nversion shortly."))))}p.isMDXComponent=!0}}]);