"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8346],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>u,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>s});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){return function(t){var r=p(t.components);return n.createElement(e,l({},t,{components:r}))}},p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(r),c=a,g=s["".concat(o,".").concat(c)]||s[c]||m[c]||l;return r?n.createElement(g,d(d({ref:t},u),{},{components:r})):n.createElement(g,d({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=x;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[g]="string"==typeof e?e:a,o[1]=d;for(var u=2;u<l;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},66449:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const l={id:"bxl.ConfiguredTargetNode"},o="bxl.ConfiguredTargetNode type",d={unversionedId:"api/bxl/bxl.ConfiguredTargetNode",id:"api/bxl/bxl.ConfiguredTargetNode",title:"bxl.ConfiguredTargetNode type",description:"bxl.ConfiguredTargetNode.attrs\\_eager",source:"@site/../docs/api/bxl/bxl.ConfiguredTargetNode.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/bxl.ConfiguredTargetNode",permalink:"/docs/api/bxl/bxl.ConfiguredTargetNode",draft:!1,tags:[],version:"current",frontMatter:{id:"bxl.ConfiguredTargetNode"},sidebar:"apiSidebar",previous:{title:"bxl.BuildResult type",permalink:"/docs/api/bxl/bxl.BuildResult"},next:{title:"bxl.Context type",permalink:"/docs/api/bxl/bxl.Context"}},i={},u=[{value:"bxl.ConfiguredTargetNode.attrs_eager",id:"bxlconfiguredtargetnodeattrs_eager",level:2},{value:"bxl.ConfiguredTargetNode.attrs_lazy",id:"bxlconfiguredtargetnodeattrs_lazy",level:2},{value:"bxl.ConfiguredTargetNode.buildfile_path",id:"bxlconfiguredtargetnodebuildfile_path",level:2},{value:"bxl.ConfiguredTargetNode.get_source",id:"bxlconfiguredtargetnodeget_source",level:2},{value:"bxl.ConfiguredTargetNode.label",id:"bxlconfiguredtargetnodelabel",level:2},{value:"bxl.ConfiguredTargetNode.resolved_attrs_eager",id:"bxlconfiguredtargetnoderesolved_attrs_eager",level:2},{value:"bxl.ConfiguredTargetNode.resolved_attrs_lazy",id:"bxlconfiguredtargetnoderesolved_attrs_lazy",level:2},{value:"bxl.ConfiguredTargetNode.rule_kind",id:"bxlconfiguredtargetnoderule_kind",level:2},{value:"bxl.ConfiguredTargetNode.rule_type",id:"bxlconfiguredtargetnoderule_type",level:2},{value:"bxl.ConfiguredTargetNode.sources",id:"bxlconfiguredtargetnodesources",level:2},{value:"bxl.ConfiguredTargetNode.unwrap_forward",id:"bxlconfiguredtargetnodeunwrap_forward",level:2}],s={toc:u};function p(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"bxlconfiguredtargetnode-type"},(0,a.mdx)("inlineCode",{parentName:"h1"},"bxl.ConfiguredTargetNode")," type"),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnodeattrs_eager"},"bxl.ConfiguredTargetNode.attrs","_","eager"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.ConfiguredTargetNode.attrs_eager()\n")),(0,a.mdx)("p",null,"Returns a struct of all the attributes of this target node. The structs fields are the attributes names, and the values are ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkConfiguredAttr"),"]","."),(0,a.mdx)("p",null,"If you need to access many or all attrs on the same node, then this is the preferred way. Otherwise,\nusing ",(0,a.mdx)("inlineCode",{parentName:"p"},"attrs_lazy()")," would be a better option for only accessing only a few attrs, although this really\ndepends on what kind of attrs are on the node. Benchmarking performance will give you the best\nindication on which method to use."),(0,a.mdx)("p",null,"You should store the result of this function call for further usage in the code rather than calling\n",(0,a.mdx)("inlineCode",{parentName:"p"},"attrs_eager()")," each time you need to access the attrs."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrs_eager(ctx):\n    node = ctx.cquery().owner("cell//path/to/TARGETS")[0]\n    attrs = node.attrs_eager() # cache once\n    ctx.output.print(attrs)\n    # do more stuff with attrs\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnodeattrs_lazy"},"bxl.ConfiguredTargetNode.attrs","_","lazy"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.ConfiguredTargetNode.attrs_lazy() -> lazy_attrs\n")),(0,a.mdx)("p",null,"Returns a ",(0,a.mdx)("inlineCode",{parentName:"p"},"lazy_attrs")," object that you can call ",(0,a.mdx)("inlineCode",{parentName:"p"},"get()")," on that gets an attr one at a time."),(0,a.mdx)("p",null,"If you need to access only few attrs on the same node, then this is the preferred way. Otherwise,\nusing ",(0,a.mdx)("inlineCode",{parentName:"p"},"attrs_eager()")," would be a better option for accessing many or all attrs, although this really\ndepends on what kind of attrs are on the node. Benchmarking performance will give you the best\nindication on which method to use."),(0,a.mdx)("p",null,"You should store the result of this function call for further usage in the code rather than calling\n",(0,a.mdx)("inlineCode",{parentName:"p"},"attrs_lazy()")," each time to get the ",(0,a.mdx)("inlineCode",{parentName:"p"},"lazy_attrs")," object. Note that if the ",(0,a.mdx)("inlineCode",{parentName:"p"},"get()")," is ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),",\nthen any methods called on ",(0,a.mdx)("inlineCode",{parentName:"p"},"None")," will result in an error."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrs_lazy(ctx):\n    node = ctx.cquery().owner("cell//path/to/TARGETS")[0]\n    attrs = node.attrs_lazy() # cache once\n    ctx.output.print(attrs.get("some_attributes").value())\n    ctx.output.print(attrs.get("some_attribute").label)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnodebuildfile_path"},"bxl.ConfiguredTargetNode.buildfile","_","path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.ConfiguredTargetNode.buildfile_path: bxl.FileNode\n")),(0,a.mdx)("p",null,"Gets the buildfile path from the configured target node."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"def _impl_label(ctx):\n    target_node = ctx.cquery().eval(\"owner('path/to/file')\")[0]\n    ctx.output.print(target_node.buildfile_path)\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnodeget_source"},"bxl.ConfiguredTargetNode.get","_","source"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.ConfiguredTargetNode.get_source(\n    path: str,\n    ctx: bxl.Context\n) -> None | artifact\n")),(0,a.mdx)("p",null,"Gets the source ",(0,a.mdx)("inlineCode",{parentName:"p"},"Artifact")," that corresponds to the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"path")," given a context. The path should be the project relative path to the file, or an absolute path."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_get_source(ctx):\n    owner = ctx.cquery().owner("project/relative/path/to/file")[0]\n    artifact = owner.sources()[0]\n    ctx.output.print(artifact)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnodelabel"},"bxl.ConfiguredTargetNode.label"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.ConfiguredTargetNode.label: configured_target_label\n")),(0,a.mdx)("p",null,"Gets the configured target label of this target node."),(0,a.mdx)("p",null,"Note that you cannot get a non-configured label from a configured target node because the\nconfigured target node is not uniquely identified a non-configured label, only by the configured target label."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_label(ctx):\n    node = ctx.configured_targets("my_cell//bin:the_binary")\n    ctx.output.print(node.label)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnoderesolved_attrs_eager"},"bxl.ConfiguredTargetNode.resolved","_","attrs","_","eager"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.ConfiguredTargetNode.resolved_attrs_eager(ctx: bxl.Context)\n")),(0,a.mdx)("p",null,"Returns a struct of all the resolved attributes of this target node. The structs fields are the attributes names, and the values are the underlying Starlark values of the attributes."),(0,a.mdx)("p",null,"If you need to access many or all resolved attrs on the same node, then this is the preferred way. Otherwise,\nusing ",(0,a.mdx)("inlineCode",{parentName:"p"},"resolved_attrs_lazy()")," would be a better option for accessing only a few resolved attrs, although this really\ndepends on what kind of resolved attrs are on the node. Benchmarking performance will give you the best\nindication on which method to use."),(0,a.mdx)("p",null,"You should store the result of this function call for further usage in the code rather than calling\n",(0,a.mdx)("inlineCode",{parentName:"p"},"resolved_attrs_eager()")," each time you need all the resolved attrs."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_resolved_attrs_eager(ctx):\n    node = ctx.cquery().owner("cell//path/to/TARGETS")[0]\n    attrs = node.resolved_attrs_eager(ctx) # cache once\n    ctx.output.print(attrs)\n    # do more stuff with attrs\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnoderesolved_attrs_lazy"},"bxl.ConfiguredTargetNode.resolved","_","attrs","_","lazy"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.ConfiguredTargetNode.resolved_attrs_lazy(\n    ctx: bxl.Context\n) -> bxl.LazyResolvedAttrs\n")),(0,a.mdx)("p",null,"Returns a ",(0,a.mdx)("inlineCode",{parentName:"p"},"lazy_resolved_attrs")," object that you can call ",(0,a.mdx)("inlineCode",{parentName:"p"},"get()")," on that gets a resolved attr one at a time."),(0,a.mdx)("p",null,"If you need to access only few resolved attrs on the same node, then this is the preferred way. Otherwise,\nusing ",(0,a.mdx)("inlineCode",{parentName:"p"},"resolved_attrs_eager()")," would be a better option for accessing many or all resolved attrs, although this really\ndepends on what kind of resolved attrs are on the node. Benchmarking performance will give you the best\nindication on which method to use."),(0,a.mdx)("p",null,"You should store the result of this function call for further usage in the code rather than calling\n",(0,a.mdx)("inlineCode",{parentName:"p"},"resolved_attrs_lazy()")," each time to get the ",(0,a.mdx)("inlineCode",{parentName:"p"},"lazy_resolved_attrs")," object. Note that if the ",(0,a.mdx)("inlineCode",{parentName:"p"},"get()")," is ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),",\nthen any methods called on ",(0,a.mdx)("inlineCode",{parentName:"p"},"None")," will result in an error."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_resolved_attrs_lazy(ctx):\n    node = ctx.cquery().owner("cell//path/to/TARGETS")[0]\n    attrs = node.resolved_attrs_lazy(ctx) # cache once\n    ctx.output.print(attrs.get("some_attributes").value())\n    ctx.output.print(attrs.get("some_attribute").label)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnoderule_kind"},"bxl.ConfiguredTargetNode.rule","_","kind"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.ConfiguredTargetNode.rule_kind: str\n")),(0,a.mdx)("p",null,"Gets the targets' corresponding rule's kind which is one of - normal (with no special properties) - configured (usable in a configuration context) - toolchain (only usable as a toolchain dep)"),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rule_kind(ctx):\n    node = ctx.configured_targets("my_cell//bin:the_binary")\n    ctx.output.print(node.rule_kind)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnoderule_type"},"bxl.ConfiguredTargetNode.rule","_","type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"bxl.ConfiguredTargetNode.rule_type: str\n")),(0,a.mdx)("p",null,"Gets the targets' corresponding rule's name. This is the fully qualified rule name including the import path."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rule_type(ctx):\n    node = ctx.configured_targets("my_cell//bin:the_binary")\n    ctx.output.print(node.rule_type)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnodesources"},"bxl.ConfiguredTargetNode.sources"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.ConfiguredTargetNode.sources() -> list[artifact]\n")),(0,a.mdx)("p",null,"Returns a List of all the sources used by this node."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_sources(ctx):\n    node = ctx.configured_targets("my_cell//bin:the_binary")\n    ctx.output.print(node.sources())\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxlconfiguredtargetnodeunwrap_forward"},"bxl.ConfiguredTargetNode.unwrap","_","forward"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.ConfiguredTargetNode.unwrap_forward() -> bxl.ConfiguredTargetNode\n")),(0,a.mdx)("p",null,"Skip incoming transition forward node. If a target is a forward node, which is created by applying incoming configuration transition, return the transition target, otherwise return itself. This is is particularly useful when you don't care about 'forward' node."),(0,a.mdx)("p",null,"Example usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_unwrap_forward(ctx):\n    node = ctx.configured_targets("my_cell//bin:the_binary")\n    actual_node = node.unwrap_forward()\n')))}p.isMDXComponent=!0}}]);