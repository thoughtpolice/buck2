"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3117],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>x,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>d,withMDXComponents:()=>s});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var x=n.createContext({}),s=function(e){return function(t){var r=d(t.components);return n.createElement(e,a({},t,{components:r}))}},d=function(e){var t=n.useContext(x),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(x.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,x=i(e,["components","mdxType","originalType","parentName"]),s=d(r),p=l,g=s["".concat(u,".").concat(p)]||s[p]||m[p]||a;return r?n.createElement(g,o(o({ref:t},x),{},{components:r})):n.createElement(g,o({ref:t},x))}));function f(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,u=new Array(a);u[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[g]="string"==typeof e?e:l,u[1]=o;for(var x=2;x<a;x++)u[x]=r[x];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},78241:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>x});var n=r(87462),l=(r(67294),r(3905));const a={id:"bxl.UqueryContext"},u="bxl.UqueryContext type",o={unversionedId:"api/bxl/bxl.UqueryContext",id:"api/bxl/bxl.UqueryContext",title:"bxl.UqueryContext type",description:"The context for performing uquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command.",source:"@site/../docs/api/bxl/bxl.UqueryContext.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/bxl.UqueryContext",permalink:"/docs/api/bxl/bxl.UqueryContext",draft:!1,tags:[],version:"current",frontMatter:{id:"bxl.UqueryContext"},sidebar:"apiSidebar",previous:{title:"bxl.UnconfiguredTargetNode type",permalink:"/docs/api/bxl/bxl.UnconfiguredTargetNode"},next:{title:"cmd_args type",permalink:"/docs/api/bxl/cmd_args"}},i={},x=[{value:"bxl.UqueryContext.allpaths",id:"bxluquerycontextallpaths",level:2},{value:"bxl.UqueryContext.attrfilter",id:"bxluquerycontextattrfilter",level:2},{value:"bxl.UqueryContext.attrregexfilter",id:"bxluquerycontextattrregexfilter",level:2},{value:"bxl.UqueryContext.buildfile",id:"bxluquerycontextbuildfile",level:2},{value:"bxl.UqueryContext.deps",id:"bxluquerycontextdeps",level:2},{value:"bxl.UqueryContext.eval",id:"bxluquerycontexteval",level:2},{value:"bxl.UqueryContext.filter",id:"bxluquerycontextfilter",level:2},{value:"bxl.UqueryContext.inputs",id:"bxluquerycontextinputs",level:2},{value:"bxl.UqueryContext.kind",id:"bxluquerycontextkind",level:2},{value:"bxl.UqueryContext.owner",id:"bxluquerycontextowner",level:2},{value:"bxl.UqueryContext.rdeps",id:"bxluquerycontextrdeps",level:2},{value:"bxl.UqueryContext.somepath",id:"bxluquerycontextsomepath",level:2},{value:"bxl.UqueryContext.targets_in_buildfile",id:"bxluquerycontexttargets_in_buildfile",level:2},{value:"bxl.UqueryContext.testsof",id:"bxluquerycontexttestsof",level:2}],s={toc:x};function d(e){let{components:t,...r}=e;return(0,l.mdx)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"bxluquerycontext-type"},(0,l.mdx)("inlineCode",{parentName:"h1"},"bxl.UqueryContext")," type"),(0,l.mdx)("p",null,"The context for performing ",(0,l.mdx)("inlineCode",{parentName:"p"},"uquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command."),(0,l.mdx)("h2",{id:"bxluquerycontextallpaths"},"bxl.UqueryContext.allpaths"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.allpaths(\n    from: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label],\n    to: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"allpaths")," query for computing all dependency paths."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextattrfilter"},"bxl.UqueryContext.attrfilter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.attrfilter(\n    attr: str,\n    value: str,\n    targets: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextattrregexfilter"},"bxl.UqueryContext.attrregexfilter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.attrregexfilter(\n    attribute: str,\n    value: str,\n    targets: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrregexfilter(ctx):\n    filtered = ctx.uquery().attrregexfilter("foo", "he.lo", "bin/kind/...")\n    ctx.output.print(filtered)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextbuildfile"},"bxl.UqueryContext.buildfile"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.buildfile(\n    targets: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> file_set\n")),(0,l.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.uquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.uquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextdeps"},"bxl.UqueryContext.deps"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.deps(\n    universe: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label],\n    depth: None | int = None,\n    filter: None | str = None\n) -> target_set\n")),(0,l.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_deps(ctx):\n    result = ctx.uquery().deps("root//bin:the_binary", 1)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontexteval"},"bxl.UqueryContext.eval"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.eval(\n    query: str,\n    query_args: None | target_set | list[str] = None\n)\n")),(0,l.mdx)("p",null,"Evaluates some general query string, ",(0,l.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings. Returns a ",(0,l.mdx)("inlineCode",{parentName:"p"},"dict")," of target labels mapped to their ",(0,l.mdx)("inlineCode",{parentName:"p"},"target_set")," results if ",(0,l.mdx)("inlineCode",{parentName:"p"},"query_args")," was passed in, otherwise returns a single ",(0,l.mdx)("inlineCode",{parentName:"p"},"target_set"),"."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result1 = ctx.uquery().eval("inputs(cell//path/to/file:target)")\n    ctx.output.print(result1)\n\n    result2 = ctx.uquery().eval("inputs(%s)", query_args = ["cell//path/to/file:target"])\n    ctx.output.print(result2)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextfilter"},"bxl.UqueryContext.filter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.filter(\n    regex: str,\n    targets: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The filter query for filtering targets by name."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.uquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextinputs"},"bxl.UqueryContext.inputs"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.inputs(\n    targets: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> file_set\n")),(0,l.mdx)("p",null,"The inputs query for finding input files."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_inputs(ctx):\n    result = ctx.uquery().inputs("root//bin:the_binary")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextkind"},"bxl.UqueryContext.kind"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.kind(\n    regex: str,\n    targets: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The kind query for filtering targets by rule type."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_kind(ctx):\n    kind = ctx.uquery().kind(".*1", "bin/kind/...")\n    ctx.output.print(kind)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextowner"},"bxl.UqueryContext.owner"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.owner(\n    files: file_set | str | list[str] | tuple[str, ...]\n) -> target_set\n")),(0,l.mdx)("p",null,"The owner query for finding targets that own specified files. Note that if you do not pass in a cell path (where the format is ",(0,l.mdx)("inlineCode",{parentName:"p"},"<cell>//path/to/file"),"), the path is resolved against the cell that the BXL script lives in. If you need to evaluate a file path that lives in a different cell, you must pass in the fully qualified cell path."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.uquery().owner("bin/TARGETS.fixture")\n    ctx.output.print(owner)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextrdeps"},"bxl.UqueryContext.rdeps"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.rdeps(\n    universe: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label],\n    from: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label],\n    depth: int = _\n) -> target_set\n")),(0,l.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rdeps(ctx):\n    result = ctx.uquery().rdeps("root//bin:the_binary", "//lib:file1", 100)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontextsomepath"},"bxl.UqueryContext.somepath"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.somepath(\n    from: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label],\n    to: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The somepaths query, which returns the graph of nodes on some arbitrary path from a start to destination target."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontexttargets_in_buildfile"},"bxl.UqueryContext.targets","_","in","_","buildfile"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.targets_in_buildfile(\n    files: file_set | str | list[str] | tuple[str, ...]\n) -> target_set\n")),(0,l.mdx)("p",null,"Given a set of buildfiles, return all targets within those buildfiles."),(0,l.mdx)("p",null,"Usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _targets_in_buildfile_impl(ctx):\n    targets = ctx.uquery().targets_in_buildfile("bin/TARGETS.fixture")\n    ctx.output.print(targets)\n')),(0,l.mdx)("p",null,"This is subject to be removed in future in favor of a more general ",(0,l.mdx)("inlineCode",{parentName:"p"},"targets_in_packages"),"."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"bxluquerycontexttestsof"},"bxl.UqueryContext.testsof"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def bxl.UqueryContext.testsof(\n    targets: bxl.UnconfiguredTargetNode | str | target_label | target_set | list[bxl.UnconfiguredTargetNode | str | target_label]\n) -> target_set\n")),(0,l.mdx)("p",null,"The testsof query for listing the tests of the specified targets."),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _testsof_impl(ctx):\n    result = ctx.uquery().testsof("//:foo_lib")\n    ctx.output.print(result)\n')))}d.isMDXComponent=!0}}]);